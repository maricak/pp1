

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected = false;
	
    int line = -1;
    String type = "";

	Logger log = Logger.getLogger(getClass());   

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
        done_parsing();
        report_error(message, info);
    }      
  	public void syntax_error(Symbol cur_token) {
        line = cur_token.left;
        report_error("Sintaksna greska: ", cur_token);
    }	
	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje ne moze da se nastavi: ", cur_token);
    }      
    public void report_error(String message, Object info) {
		errorDetected = true;
    	StringBuilder msg = new StringBuilder("[GRESKA! ");
        msg.append(message);
        if (info instanceof Symbol)
            msg.append("'").append(((Symbol)info).value).append("' na liniji ").append(((Symbol)info).left);
        else if(info == null) {
            msg.append(" " + type + " ");
            msg.append("na liniji " + line);
        }
        msg.append("]");
        log.error(msg.toString());
    }  
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
        	msg.append("'").append(((Symbol)info).value).append("' na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal INT, BOOL, CHAR;
terminal NULL;
terminal ADD, SUBTRACT, MULTIPLY, DIVIDE, MODULO;
terminal EQUAL, NOT_EQUAL, GREATER, GREATER_EQUAL, LESS, LESS_EQUAL;
terminal AND, OR;
terminal ASSIGN;
terminal INCREMENT, DECREMENT;
terminal SEPARATOR, COMMA, POINT;
terminal LEFT_PARENTHESIS, RIGHT_PARENTHESIS, LEFT_BRACKET, RIGHT_BRACKET, LEFT_BRACE, RIGHT_BRACE;
terminal PROGRAM, CLASS, EXTENDS, INTERFACE, IMPLEMENTS, ENUM, IF, ELSE, NEW, FOR, RETURN, BREAK, CONTINUE, PRINT, READ, VOID, CONST;
terminal CHR, ORD, LEN;
terminal Integer INT_VALUE;
terminal Integer CHAR_VALUE;
terminal Integer BOOL_VALUE;
terminal String IDENTIFIER;

nonterminal Program Program;
nonterminal DeclList DeclList;
nonterminal Decl Decl;
nonterminal ConstDecl ConstDecl;
nonterminal ConstAssignList ConstAssignList;
nonterminal EnumDecl EnumDecl;
nonterminal VarDecl VarDecl;
nonterminal VarList VarList;
nonterminal ClassDecl ClassDecl;
nonterminal Extends Extends;
nonterminal ClassVarDeclList ClassVarDeclList;
nonterminal Implements Implements;
nonterminal InterfaceList InterfaceList;
nonterminal ClassMethodDeclList ClassMethodDeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal InterfaceDecl InterfaceDecl;
nonterminal InterfaceMethodDeclList InterfaceMethodDeclList;
nonterminal InterfaceMethodDecl InterfaceMethodDecl;
nonterminal MethodDecl MethodDecl;
nonterminal OptionalBrackets OptionalBrackets;
nonterminal VarDeclList VarDeclList;
nonterminal FormPars FormPars;
nonterminal FormPar FormPar;
nonterminal Statement Statement;
nonterminal ConstAssign ConstAssign;
nonterminal IfCond IfCond;
nonterminal ForStatement ForStatement;
nonterminal ForCond ForCond;
nonterminal PrintParam PrintParam;
nonterminal StatementList StatementList;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal ActPars ActPars;
nonterminal MethodVarsEnd MethodVarsEnd;
nonterminal ForStart ForStart;
nonterminal ForBody ForBody;
nonterminal EnumAssignList EnumAssignList;
nonterminal EnumAssign EnumAssign;
nonterminal MethodFormParsEnd MethodFormParsEnd;
nonterminal CallStart CallStart; 
nonterminal Assignop Assignop;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal OrStart OrStart;
nonterminal ElseStart ElseStart;
nonterminal IfStart IfStart;
nonterminal ForInitStmnt ForInitStmnt;
nonterminal ForUpdateStmnt ForUpdateStmnt;
nonterminal FuncCallName FuncCallName;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgramStart, MethodStart, Designator, EnumStart, InterfaceStart, InterfaceMethodStart;
nonterminal rs.etf.pp1.symboltable.concepts.Struct ClassStart, Factor, Expr, Term, Type, ReturnType, Condition, CondTermList, CondTerm, CondFactList, CondFact, StandardFunction;
nonterminal rs.ac.bg.etf.pp1.mysymboltable.Constant ConstValue;
nonterminal rs.ac.bg.etf.pp1.mysymboltable.Variable VarName;

precedence left ELSE;

Program ::= (Program) ProgramStart:P1 DeclList:D2 LEFT_BRACE MethodDeclList:M3 RIGHT_BRACE {: RESULT=new Program(P1, D2, M3); RESULT.setLine(P1left); :}
          ;

ProgramStart ::= (ProgramStart) {: parser.type = "globalne promenljive"; :} PROGRAM IDENTIFIER:programName {: RESULT=new ProgramStart(programName); RESULT.setLine(programNameleft); :}                 
               ;

DeclList ::= (DeclarationList) DeclList:D1 Decl:D2 {: RESULT=new DeclarationList(D1, D2); RESULT.setLine(D1left); :}
		   | (DeclarationListNO) {: RESULT=new DeclarationListNO(); :} /*epsilon */
           ;

Decl ::= (DeclarationConst) ConstDecl:C1 {: RESULT=new DeclarationConst(C1); RESULT.setLine(C1left); :}
       | (DeclarationVar) VarDecl:V1 {: RESULT=new DeclarationVar(V1); RESULT.setLine(V1left); :}
       | (DeclarationClass) ClassDecl:C1 {: RESULT=new DeclarationClass(C1); RESULT.setLine(C1left); :}
       | (DeclarationEnum) EnumDecl:E1 {: RESULT=new DeclarationEnum(E1); RESULT.setLine(E1left); :}
       | (DeclarationInterface) InterfaceDecl:I1 {: RESULT=new DeclarationInterface(I1); RESULT.setLine(I1left); :}
       ;	

ConstDecl ::= (ConstantDecl) CONST Type:T1 ConstAssignList:C2 SEPARATOR {: RESULT=new ConstantDecl(T1, C2); RESULT.setLine(T1left); :}
            | (ConstantDeclERR) CONST error SEPARATOR 
              {: parser.report_error("OPORAVAK Sintasna greska prilikom definisanja konstante", null); :} {: RESULT=new ConstantDeclERR(); :}
            ; 
			
ConstAssignList ::= (ConstantAssignList) ConstAssignList:C1 COMMA ConstAssign:C2 {: RESULT=new ConstantAssignList(C1, C2); RESULT.setLine(C1left); :}
				  | (ConstantAssignListEnd) ConstAssign:C1 {: RESULT=new ConstantAssignListEnd(C1); RESULT.setLine(C1left); :}
                  ;
	
ConstAssign ::= (ConstantAssign)  IDENTIFIER:constName ASSIGN ConstValue:constValue {: RESULT=new ConstantAssign(constName, constValue); RESULT.setLine(constNameleft); :}
              | (ConstantAssignERR) error 
                {: parser.report_error("OPORAVAK Sintasna greska prilikom definisanja konstante", null); :} {: RESULT=new ConstantAssignERR(); :}
              ;					

ConstValue ::= (ConstValueInt) INT_VALUE:value {: RESULT=new ConstValueInt(value); RESULT.setLine(valueleft); :} 
			 | (ConstValueChar) CHAR_VALUE:value {: RESULT=new ConstValueChar(value); RESULT.setLine(valueleft); :} 
			 | (ConstValueBool) BOOL_VALUE:value {: RESULT=new ConstValueBool(value); RESULT.setLine(valueleft); :}
             ;

EnumDecl ::= (EnumDecl) EnumStart:E1 LEFT_BRACE EnumAssignList:E2 RIGHT_BRACE {: RESULT=new EnumDecl(E1, E2); RESULT.setLine(E1left); :}
           ;

EnumStart ::= (EnumStart) ENUM IDENTIFIER:enumName {: RESULT=new EnumStart(enumName); RESULT.setLine(enumNameleft); :}
            ;

EnumAssignList ::= (EnumerationAssign) EnumAssignList:E1 COMMA EnumAssign:E2 {: RESULT=new EnumerationAssign(E1, E2); RESULT.setLine(E1left); :}
                 | (EnumerationAssignEnd) EnumAssign:E1 {: RESULT=new EnumerationAssignEnd(E1); RESULT.setLine(E1left); :}
                 ;

EnumAssign ::= (EnumName) IDENTIFIER:enumName {: RESULT=new EnumName(enumName); RESULT.setLine(enumNameleft); :} 
             | (EnumNameAssign) IDENTIFIER:enumName ASSIGN INT_VALUE:value {: RESULT=new EnumNameAssign(enumName, value); RESULT.setLine(enumNameleft); :}
             ;

VarDecl ::= (VariableDecl) Type:T1 VarList:V2 SEPARATOR {: RESULT=new VariableDecl(T1, V2); RESULT.setLine(T1left); :}
          | (VariableDeclERR) error SEPARATOR 
            {: parser.report_error("OPORAVAK Sintasna greska prilikom deklarisanja", null); :} {: RESULT=new VariableDeclERR(); :}
          ;
		
VarList ::= (VariableList) VarList:V1 COMMA VarName:V2 {: RESULT=new VariableList(V1, V2); RESULT.setLine(V1left); :}
          | (VariableListEnd) VarName:V1 {: RESULT=new VariableListEnd(V1); RESULT.setLine(V1left); :} 
          ;
			
VarName ::= (VariableName) IDENTIFIER:varName OptionalBrackets:brackets {: RESULT=new VariableName(varName, brackets); RESULT.setLine(varNameleft); :}      
          | (VariableNameERR) error 
            {: parser.report_error("OPORAVAK Sintasna greska prilikom deklarisanja", null); :} {: RESULT=new VariableNameERR(); :}
          | (VariableNameEmptyERR) /* epsilon */ 
            {: parser.report_error("OPORAVAK Sintasna greska prilikom deklarisanja", null); :} {: RESULT=new VariableNameEmptyERR(); :}
		  ;

ClassDecl ::= (ClassDecl) ClassStart:C1 Extends:E2 Implements:I3 LEFT_BRACE ClassVarDeclList:C4 ClassMethodDeclList:C5 RIGHT_BRACE {: RESULT=new ClassDecl(C1, E2, I3, C4, C5); RESULT.setLine(C1left); :}
            ;

ClassStart ::= (ClassStart) {: parser.type = "polja klase"; :} CLASS IDENTIFIER:className {: RESULT=new ClassStart(className); RESULT.setLine(classNameleft); :}               
             ;
			
ClassVarDeclList ::= (ClassVarDeclList) VarDeclList:V1 {: RESULT=new ClassVarDeclList(V1); RESULT.setLine(V1left); :}
                   ;

Extends ::= (ExtendsType) EXTENDS Type:T1 {: RESULT=new ExtendsType(T1); RESULT.setLine(T1left); :}
          | (ExtendsERR) error {: parser.report_error("OPORAVAK Greska kod prosirivanja klase", new Object()); :} {: RESULT=new ExtendsERR(); :}
          | (ExtendsTypeNO) {: RESULT=new ExtendsTypeNO(); :} /* epsilon */
          ;					

Implements ::= (ImplementsList) IMPLEMENTS InterfaceList:I1 {: RESULT=new ImplementsList(I1); RESULT.setLine(I1left); :}
             | (ImplementsListNO) {: RESULT=new ImplementsListNO(); :} /* epsilon */
             ;
            
InterfaceList ::= (Interfaces) InterfaceList:I1 COMMA Type:T2 {: RESULT=new Interfaces(I1, T2); RESULT.setLine(I1left); :}
                | (Interface) Type:T1 {: RESULT=new Interface(T1); RESULT.setLine(T1left); :}
                | (InterfacesNO) {: RESULT=new InterfacesNO(); :} /* epsilon */
                ;
			
ClassMethodDeclList ::= (MethodDeclarationList) LEFT_BRACE MethodDeclList:M1 RIGHT_BRACE {: RESULT=new MethodDeclarationList(M1); RESULT.setLine(M1left); :}
						 | (MethodDeclarationListNO) {: RESULT=new MethodDeclarationListNO(); :} /* epsilon */
						 ;
								
MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
			     | (MethodDeclarationsNO) {: RESULT=new MethodDeclarationsNO(); :}/* epsilon */
			     ;

InterfaceDecl ::= (InterfaceDecl) InterfaceStart:I1 LEFT_BRACE InterfaceMethodDeclList:I2 RIGHT_BRACE {: RESULT=new InterfaceDecl(I1, I2); RESULT.setLine(I1left); :}
				;

InterfaceStart ::= (InterfaceStart) INTERFACE IDENTIFIER:interfaceName {: RESULT=new InterfaceStart(interfaceName); RESULT.setLine(interfaceNameleft); :}
                 ;

InterfaceMethodDeclList ::= (InterfaceMethodList) InterfaceMethodDeclList:I1 InterfaceMethodDecl:I2 {: RESULT=new InterfaceMethodList(I1, I2); RESULT.setLine(I1left); :}
						  | (InterfaceMethodListNO) {: RESULT=new InterfaceMethodListNO(); :} /* epsilon */
						  ;

InterfaceMethodDecl ::= (InterfaceMethodDecl) InterfaceMethodStart:I1 LEFT_PARENTHESIS FormPars:F2 RIGHT_PARENTHESIS SEPARATOR {: RESULT=new InterfaceMethodDecl(I1, F2); RESULT.setLine(I1left); :}
					  ;

InterfaceMethodStart ::= (InterfaceMethodStart) ReturnType:R1 IDENTIFIER:methodName {: RESULT=new InterfaceMethodStart(R1, methodName); RESULT.setLine(R1left); :}
                       ;

MethodDecl ::= (MethodDecl) MethodStart:M1 LEFT_PARENTHESIS FormPars:F2 MethodFormParsEnd:M3 RIGHT_PARENTHESIS {: parser.type = "lokalne promenljive"; :} VarDeclList:V4 MethodVarsEnd:M5 LEFT_BRACE StatementList:S6 RIGHT_BRACE {: RESULT=new MethodDecl(M1, F2, M3, V4, M5, S6); RESULT.setLine(M1left); :}
             ;

MethodStart ::= (MethodStart) {: parser.type = "formalnog parametra"; :} ReturnType:R1 IDENTIFIER:methodName {: RESULT=new MethodStart(R1, methodName); RESULT.setLine(R1left); :}                
			  ;
MethodFormParsEnd ::= (MethodFormParsEnd) {: RESULT=new MethodFormParsEnd(); :} /* epsilon */
                    ;

MethodVarsEnd ::= (MethodVarsEnd) {: RESULT=new MethodVarsEnd(); :}  /* epsilon */
                ;
	
ReturnType ::= (ReturnT) Type:T1 {: RESULT=new ReturnT(T1); RESULT.setLine(T1left); :}
			 | (ReturnVoid) VOID {: RESULT=new ReturnVoid(); :}
			 ;
			
FormPars ::= (FormalParameters) FormPars:F1 COMMA FormPar:F2 {: RESULT=new FormalParameters(F1, F2); RESULT.setLine(F1left); :}           
		   | (FormalParameter) FormPar:F1 {: RESULT=new FormalParameter(F1); RESULT.setLine(F1left); :}
		   | (FormalParametersNO) {: RESULT=new FormalParametersNO(); :}	/* epsilon */
		   ;

FormPar ::= (FormPar) Type:T1 VarName:V2 {: RESULT=new FormPar(T1, V2); RESULT.setLine(T1left); :} 
		  ;

VarDeclList ::= (VariableDeclList) VarDeclList:V1 VarDecl:V2 {: RESULT=new VariableDeclList(V1, V2); RESULT.setLine(V1left); :}
			  | (VariableDeclListNO) {: RESULT=new VariableDeclListNO(); :} /* epsilon */
			  ;	
			
OptionalBrackets ::= (Brackets) LEFT_BRACKET RIGHT_BRACKET {: RESULT=new Brackets(); :}
				   | (BracketsNO) {: RESULT=new BracketsNO(); :} /* epsilon */
				   ;

Type ::= (TypeInt) INT {: RESULT=new TypeInt(); :}
	   | (TypeBool) BOOL {: RESULT=new TypeBool(); :}
	   | (TypeChar) CHAR {: RESULT=new TypeChar(); :}
       | (TypeCustom) IDENTIFIER:typeName {: RESULT=new TypeCustom(typeName); RESULT.setLine(typeNameleft); :}
	   ;

StandardFunction ::= (StandardFunctionChr) CHR LEFT_PARENTHESIS Expr:E1 RIGHT_PARENTHESIS {: RESULT=new StandardFunctionChr(E1); RESULT.setLine(E1left); :}
                   | (StandardFunctionOrd) ORD LEFT_PARENTHESIS Expr:E1 RIGHT_PARENTHESIS {: RESULT=new StandardFunctionOrd(E1); RESULT.setLine(E1left); :}
                   | (StandardFunctionLen) LEN LEFT_PARENTHESIS Expr:E1 RIGHT_PARENTHESIS {: RESULT=new StandardFunctionLen(E1); RESULT.setLine(E1left); :}
                   ;

Statement ::= (StatementDesignator) DesignatorStatement:D1 SEPARATOR {: RESULT=new StatementDesignator(D1); RESULT.setLine(D1left); :}
			| (StatementIf) IfStart:I1 IfCond:I2 Statement:S3 {: RESULT=new StatementIf(I1, I2, S3); RESULT.setLine(I1left); :} 
			| (StatementIfElse) IfStart:I1 IfCond:I2 Statement:S3 ElseStart:E4 Statement:S5 {: RESULT=new StatementIfElse(I1, I2, S3, E4, S5); RESULT.setLine(I1left); :} 
			| (StatementFor) ForStatement:F1 {: RESULT=new StatementFor(F1); RESULT.setLine(F1left); :}
			| (StatementBreak) BREAK SEPARATOR {: RESULT=new StatementBreak(); :}
			| (StatementContinue) CONTINUE SEPARATOR {: RESULT=new StatementContinue(); :}
			| (StatementReturn) RETURN SEPARATOR {: RESULT=new StatementReturn(); :}
			| (StatementReturnExpr) RETURN Expr:E1 SEPARATOR {: RESULT=new StatementReturnExpr(E1); RESULT.setLine(E1left); :}
			| (StatementRead) READ LEFT_PARENTHESIS Designator:D1 RIGHT_PARENTHESIS SEPARATOR {: RESULT=new StatementRead(D1); RESULT.setLine(D1left); :}
			| (StatementPrint) PRINT LEFT_PARENTHESIS Expr:E1 PrintParam:P2 RIGHT_PARENTHESIS SEPARATOR {: RESULT=new StatementPrint(E1, P2); RESULT.setLine(E1left); :}
			| (StatementBlock) LEFT_BRACE StatementList:S1 RIGHT_BRACE {: RESULT=new StatementBlock(S1); RESULT.setLine(S1left); :}
			;

IfStart ::= (IfStart) IF {: RESULT=new IfStart(); :}
          ;  

IfCond ::= (IfCondition) LEFT_PARENTHESIS Condition:C1 RIGHT_PARENTHESIS {: RESULT=new IfCondition(C1); RESULT.setLine(C1left); :}
         ;

ElseStart ::= (ElseStart) ELSE {: RESULT=new ElseStart(); :}    
       ; 

ForStatement ::= (ForStatement) ForStart:F1 LEFT_PARENTHESIS ForInitStmnt:F2 SEPARATOR ForCond:F3 SEPARATOR ForUpdateStmnt:F4 RIGHT_PARENTHESIS ForBody:F5 {: RESULT=new ForStatement(F1, F2, F3, F4, F5); RESULT.setLine(F1left); :}
               ;

ForStart ::= (ForStart) FOR {: RESULT=new ForStart(); :} 
           ;
			
ForCond ::= (ForCondition) Condition:C1 {: RESULT=new ForCondition(C1); RESULT.setLine(C1left); :} 
		  | (ForConditionNO) {: RESULT=new ForConditionNO(); :} /* epsilon */
		  ;

ForInitStmnt ::= (ForInitStatement) DesignatorStatement:D1 {: RESULT=new ForInitStatement(D1); RESULT.setLine(D1left); :}
               | (ForInitStatementNO) {: RESULT=new ForInitStatementNO(); :} /* epsilon */
               ;    

ForUpdateStmnt ::= (ForUpdateStatement) DesignatorStatement:D1 {: RESULT=new ForUpdateStatement(D1); RESULT.setLine(D1left); :}
                 | (ForUpdateStatementNO) {: RESULT=new ForUpdateStatementNO(); :} /* epsilon */
                 ;

ForBody ::= (ForBody) Statement:S1 {: RESULT=new ForBody(S1); RESULT.setLine(S1left); :}
          ;
	
PrintParam ::= (PrintParameter) COMMA INT_VALUE:value {: RESULT=new PrintParameter(value); RESULT.setLine(valueleft); :}
             | (PrintParameterNO) {: RESULT=new PrintParameterNO(); :} /* espilon */
             ;		
			
StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}
				| (StatementsNO) {: RESULT=new StatementsNO(); :} /* epsilon */
				;

DesignatorStatement ::= (DesignatorAssign) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new DesignatorAssign(D1, A2, E3); RESULT.setLine(D1left); :}
                      | (DesignatorStandardFunction) StandardFunction:S1 {: RESULT=new DesignatorStandardFunction(S1); RESULT.setLine(S1left); :}
                      | (DesignatorFunctionCall)  Designator:D1 CallStart:C2 LEFT_PARENTHESIS ActPars:A3 RIGHT_PARENTHESIS {: RESULT=new DesignatorFunctionCall(D1, C2, A3); RESULT.setLine(D1left); :}
                      | (DesignatorIncrement) Designator:D1 INCREMENT {: RESULT=new DesignatorIncrement(D1); RESULT.setLine(D1left); :}
                      | (DesignatorDecrement) Designator:D1 DECREMENT {: RESULT=new DesignatorDecrement(D1); RESULT.setLine(D1left); :}
					  ;		

CallStart ::= (CallStart) {: RESULT=new CallStart(); :} /*epsilon */
            ;

ActPars ::= (ActParameter) Expr:E1 {: RESULT=new ActParameter(E1); RESULT.setLine(E1left); :}
          | (ActParameters) ActPars:A1 COMMA Expr:E2 {: RESULT=new ActParameters(A1, E2); RESULT.setLine(A1left); :}
          | (ActParametersNO) {: RESULT=new ActParametersNO(); :} /* epsilon */
		  ;
		
Condition ::= (Condition) CondTerm:C1 CondTermList:C2 {: RESULT=new Condition(C1, C2); RESULT.setLine(C1left); :}
			;
			
CondTermList ::= (ConditionTermList) CondTermList:C1 OrStart:O2 CondTerm:C3 {: RESULT=new ConditionTermList(C1, O2, C3); RESULT.setLine(C1left); :}
			   | (ConditionTermListNO) {: RESULT=new ConditionTermListNO(); :} /* epsilon */
			   ;				

OrStart ::= (OrStart) OR {: RESULT=new OrStart(); :}
          ;

CondTerm ::= (CondTerm) CondFact:C1 CondFactList:C2 {: RESULT=new CondTerm(C1, C2); RESULT.setLine(C1left); :}
		   ;
			
CondFactList ::= (ConditionFactList) CondFactList:C1 AND CondFact:C2 {: RESULT=new ConditionFactList(C1, C2); RESULT.setLine(C1left); :}
			   | (ConditionFactListNO) {: RESULT=new ConditionFactListNO(); :} /* epsilon */
			   ;	

CondFact ::= (CondFactExpr) Expr:E1 {: RESULT=new CondFactExpr(E1); RESULT.setLine(E1left); :} 
           | (CondFactCompare) Expr:leftExpr Relop:R1 Expr:rightExpr {: RESULT=new CondFactCompare(leftExpr, R1, rightExpr); RESULT.setLine(leftExprleft); :}
		   ;

Expr ::= (ExprTerm) Term:T1 {: RESULT=new ExprTerm(T1); RESULT.setLine(T1left); :}
       | (ExprNegativeTerm) SUBTRACT Term:T1 {: RESULT=new ExprNegativeTerm(T1); RESULT.setLine(T1left); :}
       | (ExprAddop) Expr:E1 Addop:A2 Term:T3 {: RESULT=new ExprAddop(E1, A2, T3); RESULT.setLine(E1left); :}
       | (ExprERR) error 
         {: parser.report_error("OPORAVAK Sintaksna greska EXPR ", new Object()); :} {: RESULT=new ExprERR(); :}
	   ;		

Term ::= (TermFactor) Factor:F1 {: RESULT=new TermFactor(F1); RESULT.setLine(F1left); :} 
       | (TermMulop) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new TermMulop(T1, M2, F3); RESULT.setLine(T1left); :}
	   ;			

Factor ::= (FactorDesignator) Designator:D1 {: RESULT=new FactorDesignator(D1); RESULT.setLine(D1left); :}
         | (FactorStandardFunction) StandardFunction:S1 {: RESULT=new FactorStandardFunction(S1); RESULT.setLine(S1left); :}
         | (FactorFunctionCall) Designator:D1 CallStart:C2 LEFT_PARENTHESIS ActPars:A3 RIGHT_PARENTHESIS {: RESULT=new FactorFunctionCall(D1, C2, A3); RESULT.setLine(D1left); :}
		 | (FactorConst) ConstValue:C1 {: RESULT=new FactorConst(C1); RESULT.setLine(C1left); :}	
		 | (FactorNewObj) NEW Type:T1 {: RESULT=new FactorNewObj(T1); RESULT.setLine(T1left); :}
         | (FactorNewArray) NEW Type:T1 LEFT_BRACKET Expr:E2 RIGHT_BRACKET {: RESULT=new FactorNewArray(T1, E2); RESULT.setLine(T1left); :}
		 | (FactorNull) NULL {: RESULT=new FactorNull(); :}
		 | (FactorExpression) LEFT_PARENTHESIS Expr:E1 RIGHT_PARENTHESIS {: RESULT=new FactorExpression(E1); RESULT.setLine(E1left); :}
		 ;		
					
Designator ::= (DesignatorName) IDENTIFIER:name {: RESULT=new DesignatorName(name); RESULT.setLine(nameleft); :}
             | (DesignatorPointAccess) Designator:D1 POINT IDENTIFIER:name {: RESULT=new DesignatorPointAccess(D1, name); RESULT.setLine(D1left); :}
             | (DesignatorArrayAccess) Designator:D1 LEFT_BRACKET Expr:E2 RIGHT_BRACKET {: RESULT=new DesignatorArrayAccess(D1, E2); RESULT.setLine(D1left); :}
             ;

Assignop ::= (Assignop) ASSIGN {: RESULT=new Assignop(); :} 	
		   ;

Relop ::= (Equal) EQUAL {: RESULT=new Equal(); :}
		| (NotEqual) NOT_EQUAL {: RESULT=new NotEqual(); :}
		| (Greater) GREATER {: RESULT=new Greater(); :}
		| (GreaterEqual) GREATER_EQUAL {: RESULT=new GreaterEqual(); :}
		| (Less) LESS {: RESULT=new Less(); :}
		| (LessEqual) LESS_EQUAL {: RESULT=new LessEqual(); :}
		;

Addop ::= (Add) ADD {: RESULT=new Add(); :}
		| (Subtract) SUBTRACT {: RESULT=new Subtract(); :}
		;

Mulop ::= (Multiplie) MULTIPLY {: RESULT=new Multiplie(); :} 
		| (Divide) DIVIDE {: RESULT=new Divide(); :}
		| (Modulo) MODULO {: RESULT=new Modulo(); :}
		;


