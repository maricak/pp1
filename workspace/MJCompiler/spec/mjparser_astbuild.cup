

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());   

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }      
  	public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska: ", cur_token);
    }	
	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("\nFatalna greska, parsiranje ne moze da se nastavi: ", cur_token);
    }      
    public void report_error(String message, Object info) {
		errorDetected = true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append("'").append(((Symbol)info).value).append("' na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }  
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
        	msg.append("'").append(((Symbol)info).value).append("' na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString() + " " +s.value.getClass());
	return s;
:}

terminal INT, BOOL, CHAR;
terminal NULL;
terminal ADD, SUBTRACT, MULTIPLY, DIVIDE, MODULO;
terminal EQUAL, NOT_EQUAL, GREATER, GREATER_EQUAL, LESS, LESS_EQUAL;
terminal AND, OR;
terminal ASSIGN;
terminal INCREMENT, DECREMENT;
terminal SEPARATOR, COMMA, POINT;
terminal LEFT_PARENTHESIS, RIGHT_PARENTHESIS, LEFT_BRACKET, RIGHT_BRACKET, LEFT_BRACE, RIGHT_BRACE;
terminal PROGRAM, CLASS, EXTENDS, INTERFACE, IMPLEMENTS, ENUM, IF, ELSE, NEW, FOR, RETURN, BREAK, CONTINUE, PRINT, READ, VOID, CONST;
terminal CHR, ORD, LEN;
terminal Integer INT_VALUE;
terminal Integer CHAR_VALUE;
terminal Integer BOOL_VALUE;
terminal String IDENTIFIER;
terminal ERROR;

nonterminal Program Program;
nonterminal DeclList DeclList;
nonterminal Decl Decl;
nonterminal ConstDecl ConstDecl;
nonterminal EnumDecl EnumDecl;
nonterminal OptionalAssignNum OptionalAssignNum;
nonterminal AssignNum AssignNum;
nonterminal IdentOptionalAssignNumList IdentOptionalAssignNumList;
nonterminal VarDecl VarDecl;
nonterminal IdentOptionalBracketsList IdentOptionalBracketsList;
nonterminal ClassDecl ClassDecl;
nonterminal OptionalExtendsType OptionalExtendsType;
nonterminal ExtendsType ExtendsType;
nonterminal OptionalImplementsTypeList OptionalImplementsTypeList;
nonterminal ImplementsTypeList ImplementsTypeList;
nonterminal TypeList TypeList;
nonterminal OptionalMethodDeclList OptionalMethodDeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal InterfaceDecl InterfaceDecl;
nonterminal InterfaceMethodDeclList InterfaceMethodDeclList;
nonterminal InterfaceMethodDecl InterfaceMethodDecl;
nonterminal MethodDecl MethodDecl;
nonterminal ReturnType ReturnType;
nonterminal  OptionalFormPars OptionalFormPars;
nonterminal VarDeclList VarDeclList;
nonterminal FormPars FormPars;
nonterminal OptionalBrackets OptionalBrackets;
nonterminal TypeIdentBracketsList TypeIdentBracketsList;
nonterminal Statement Statement;
nonterminal IfStatement IfStatement; 
nonterminal OptionalElse OptionalElse;
nonterminal ForStatement ForStatement;
nonterminal OptionalCondition OptionalCondition;
nonterminal OptionalDesignatorStatement OptionalDesignatorStatement;
nonterminal OptionalExpr OptionalExpr;
nonterminal OptionalCommaNumConst OptionalCommaNumConst;
nonterminal StatementList StatementList;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal DesignatorStatementOption DesignatorStatementOption;
nonterminal ActPars ActPars;
nonterminal ExprList ExprList;
nonterminal Condition Condition;
nonterminal OrCondFactList OrCondFactList;
nonterminal CondTerm CondTerm;
nonterminal AndCondFactList AndCondFactList;
nonterminal CondFact CondFact;
nonterminal OptionalRelopExpr OptionalRelopExpr;
nonterminal Expr Expr;
nonterminal OptionalMinus OptionalMinus; 
nonterminal AddopTermList AddopTermList;
nonterminal Term Term;
nonterminal MulopFactorList MulopFactorList;
nonterminal Factor Factor;
nonterminal DesignatorFactor DesignatorFactor;
nonterminal OptionalDesignatorCallParams OptionalDesignatorCallParams;
nonterminal DesignatorCallParams DesignatorCallParams;
nonterminal OptionalActPars OptionalActPars;
nonterminal NewFactor NewFactor;
nonterminal OptionalArraySelector OptionalArraySelector;
nonterminal Designator Designator;
nonterminal DesignatorSelectorList DesignatorSelectorList;
nonterminal DesignatorSelector DesignatorSelector;
nonterminal PointSelector PointSelector;
nonterminal ArraySelector ArraySelector;
nonterminal Assignop Assignop;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Type, AssignConstList;
nonterminal rs.ac.bg.etf.pp1.mysymboltable.ConstValue ConstValue;

precedence left ELSE;

Program ::= (Program) PROGRAM IDENTIFIER:I1 DeclList:D2 LEFT_BRACE MethodDeclList:M3 RIGHT_BRACE {: RESULT=new Program(I1, D2, M3); RESULT.setLine(I1left); :}
		;

DeclList ::= (DeclarationList) DeclList:D1 Decl:D2 {: RESULT=new DeclarationList(D1, D2); RESULT.setLine(D1left); :}
			|
			(DeclarationListNO) {: RESULT=new DeclarationListNO(); :} /* epsilon */
			;

Decl ::= (Declaration) ConstDecl:C1 {: RESULT=new Declaration(C1); RESULT.setLine(C1left); :}
				|
				(DeclarationVar) VarDecl:V1 {: RESULT=new DeclarationVar(V1); RESULT.setLine(V1left); :}
				|
				(DeclarationClass) ClassDecl:C1 {: RESULT=new DeclarationClass(C1); RESULT.setLine(C1left); :}
				|
				(DeclarationEnum) EnumDecl:E1 {: RESULT=new DeclarationEnum(E1); RESULT.setLine(E1left); :}
				|
				(DeclarationInterface) InterfaceDecl:I1 {: RESULT=new DeclarationInterface(I1); RESULT.setLine(I1left); :}
				;	

ConstDecl ::= (ConstDecl) CONST Type:constType IDENTIFIER:constName ASSIGN ConstValue:constValue AssignConstList:A1 SEPARATOR {: RESULT=new ConstDecl(constType, constName, constValue, A1); RESULT.setLine(constTypeleft); :}
			;
			
AssignConstList ::= (AssignConstantList) AssignConstList:A1 COMMA IDENTIFIER:constName ASSIGN ConstValue:constValue {: RESULT=new AssignConstantList(A1, constName, constValue); RESULT.setLine(A1left); :}
				|
				(AssignConstantListNO) {: RESULT=new AssignConstantListNO(); :} /* epsilon */
				;
								

ConstValue ::= (ConstValueInt) INT_VALUE:value {: RESULT=new ConstValueInt(value); RESULT.setLine(valueleft); :} 
			|
			(ConstValueChar) CHAR_VALUE:value {: RESULT=new ConstValueChar(value); RESULT.setLine(valueleft); :} 
			|
			(ConstValueBool) BOOL_VALUE:value {: RESULT=new ConstValueBool(value); RESULT.setLine(valueleft); :} 
			;

EnumDecl ::= (EnumDecl) ENUM IDENTIFIER:I1 LEFT_BRACE IDENTIFIER:I2 OptionalAssignNum:O3 IdentOptionalAssignNumList:I4 RIGHT_BRACE {: RESULT=new EnumDecl(I1, I2, O3, I4); RESULT.setLine(I1left); :}
			;

OptionalAssignNum ::= (OptionalAssgnNumberClass) AssignNum:A1 {: RESULT=new OptionalAssgnNumberClass(A1); RESULT.setLine(A1left); :}
					|
					(NoOptionalAssgnNumberClass) {: RESULT=new NoOptionalAssgnNumberClass(); :} /* epsilon */
					;					
					
AssignNum ::= (AssignNum) ASSIGN INT_VALUE:I1 {: RESULT=new AssignNum(I1); RESULT.setLine(I1left); :}
			;


IdentOptionalAssignNumList ::= (IdentifierOptionalAssignNumberListClass) IdentOptionalAssignNumList:I1 COMMA IDENTIFIER:I2 OptionalAssignNum:O3 {: RESULT=new IdentifierOptionalAssignNumberListClass(I1, I2, O3); RESULT.setLine(I1left); :}
							|
							(NoIdentifierOptionalAssignNumberListClass) {: RESULT=new NoIdentifierOptionalAssignNumberListClass(); :} /* epsilon */
							;

VarDecl ::= (VarDeclarationClass) Type:T1 IDENTIFIER:I2 OptionalBrackets:O3 IdentOptionalBracketsList:I4 SEPARATOR {: RESULT=new VarDeclarationClass(T1, I2, O3, I4); RESULT.setLine(T1left); :}
		;
		
IdentOptionalBracketsList ::= (IdentifierOptionalBracketsListClass) IdentOptionalBracketsList:I1 COMMA IDENTIFIER:I2 OptionalBrackets:O3 {: RESULT=new IdentifierOptionalBracketsListClass(I1, I2, O3); RESULT.setLine(I1left); :}
							|
							(NoIdentifierOptionalBracketsListClass) {: RESULT=new NoIdentifierOptionalBracketsListClass(); :} /* epsilon */
							;

ClassDecl ::= (ClassDeclarationClass) CLASS IDENTIFIER:I1 OptionalExtendsType:O2 OptionalImplementsTypeList:O3 LEFT_BRACE VarDeclList:V4 OptionalMethodDeclList:O5 RIGHT_BRACE {: RESULT=new ClassDeclarationClass(I1, O2, O3, V4, O5); RESULT.setLine(I1left); :}
			;
			
OptionalExtendsType ::= (OptionalExtendsTypeClass) ExtendsType:E1 {: RESULT=new OptionalExtendsTypeClass(E1); RESULT.setLine(E1left); :}
					|
					(NoOptionalExtendsTypeClass) {: RESULT=new NoOptionalExtendsTypeClass(); :} /* epsilon */
					;
		
ExtendsType ::= (ExtendsTypeClass) EXTENDS Type:T1 {: RESULT=new ExtendsTypeClass(T1); RESULT.setLine(T1left); :}
			;
			
OptionalImplementsTypeList ::= (OptionalImplementsTypeListClass) ImplementsTypeList:I1 {: RESULT=new OptionalImplementsTypeListClass(I1); RESULT.setLine(I1left); :}
							|
							(NoOptionalImplementsTypeListClass) {: RESULT=new NoOptionalImplementsTypeListClass(); :} /* epsilon */
							;
							

ImplementsTypeList ::= (ImplementsTypeListClass) IMPLEMENTS Type:T1 TypeList:T2 {: RESULT=new ImplementsTypeListClass(T1, T2); RESULT.setLine(T1left); :}
					;
		
TypeList ::= (TypeListClass) TypeList:T1 COMMA Type:T2 {: RESULT=new TypeListClass(T1, T2); RESULT.setLine(T1left); :}
			|
			(NoTypeListClass) {: RESULT=new NoTypeListClass(); :} /* epsilon */
			;
			
OptionalMethodDeclList ::= (OptionalMethodDeclarationListClass) LEFT_BRACE MethodDeclList:M1 RIGHT_BRACE {: RESULT=new OptionalMethodDeclarationListClass(M1); RESULT.setLine(M1left); :}
						|
						(NoOptionalMethodDeclarationListClass) {: RESULT=new NoOptionalMethodDeclarationListClass(); :} /* epsilon */
						;
								
MethodDeclList ::= (MethodDeclarationListClass) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarationListClass(M1, M2); RESULT.setLine(M1left); :}
			|
			(NoMethodDeclarationListClass) {: RESULT=new NoMethodDeclarationListClass(); :}/* epsilon */
			;


InterfaceDecl ::= (InterfaceDeclarationClass) INTERFACE IDENTIFIER:I1 LEFT_BRACE InterfaceMethodDeclList:I2 RIGHT_BRACE {: RESULT=new InterfaceDeclarationClass(I1, I2); RESULT.setLine(I1left); :}
				;

InterfaceMethodDeclList ::= (InterfaceMethodDeclListClass) InterfaceMethodDeclList:I1 InterfaceMethodDecl:I2 {: RESULT=new InterfaceMethodDeclListClass(I1, I2); RESULT.setLine(I1left); :}
						|
						(NoInterfaceMethodDeclListClass) {: RESULT=new NoInterfaceMethodDeclListClass(); :} /* epsilon */
						;

InterfaceMethodDecl ::= (InterfaceMethodDeclarationClass) ReturnType:R1 IDENTIFIER:I2 LEFT_PARENTHESIS OptionalFormPars:O3 RIGHT_PARENTHESIS SEPARATOR {: RESULT=new InterfaceMethodDeclarationClass(R1, I2, O3); RESULT.setLine(R1left); :}
					;

MethodDecl ::= (MethodDeclarationClass) ReturnType:R1 IDENTIFIER:I2 LEFT_PARENTHESIS OptionalFormPars:O3 RIGHT_PARENTHESIS VarDeclList:V4 LEFT_BRACE StatementList:S5 RIGHT_BRACE {: RESULT=new MethodDeclarationClass(R1, I2, O3, V4, S5); RESULT.setLine(R1left); :}
			;
			
ReturnType ::= (ReturnTypeClass) Type:T1 {: RESULT=new ReturnTypeClass(T1); RESULT.setLine(T1left); :}
			|
			(NoReturnTypeClass) VOID {: RESULT=new NoReturnTypeClass(); :}
			;

OptionalFormPars ::= (OptionalFormParsClass) FormPars:F1 {: RESULT=new OptionalFormParsClass(F1); RESULT.setLine(F1left); :}
				|
				(NoOptionalFormParsClass) {: RESULT=new NoOptionalFormParsClass(); :} /* epsilon */
				;

VarDeclList ::= (VarDeclarationListClass) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclarationListClass(V1, V2); RESULT.setLine(V1left); :}
			|
			(NoVarDeclarationListClass) {: RESULT=new NoVarDeclarationListClass(); :} /* epsilon */
			;
				
FormPars ::= (FromParamsClass) Type:T1 IDENTIFIER:I2 OptionalBrackets:O3 TypeIdentBracketsList:T4 {: RESULT=new FromParamsClass(T1, I2, O3, T4); RESULT.setLine(T1left); :}
			;
			
OptionalBrackets ::= (OptionalBracketsClass) LEFT_BRACKET RIGHT_BRACKET {: RESULT=new OptionalBracketsClass(); :}
				|
				(NoOptionalBracketsClass) {: RESULT=new NoOptionalBracketsClass(); :} /* epsilon */
				;

TypeIdentBracketsList ::= (TypeIdentBracketsListClass) TypeIdentBracketsList:T1 COMMA Type:T2 IDENTIFIER:I3 OptionalBrackets:O4 {: RESULT=new TypeIdentBracketsListClass(T1, T2, I3, O4); RESULT.setLine(T1left); :}
					|
					(NoTypeIdentBracketsListClass) {: RESULT=new NoTypeIdentBracketsListClass(); :} /* epsilon */
					;

Type ::= (TypeInt) INT {: RESULT=new TypeInt(); :}
		|
		(TypeBool) BOOL {: RESULT=new TypeBool(); :}
		|
		(TypeChar) CHAR {: RESULT=new TypeChar(); :}
		|
		(TypeCustom) IDENTIFIER:typeName {: RESULT=new TypeCustom(typeName); RESULT.setLine(typeNameleft); :}
		;

Statement ::= (StatementDesignatorClass) DesignatorStatement:D1 SEPARATOR {: RESULT=new StatementDesignatorClass(D1); RESULT.setLine(D1left); :}
			|
			(StatementIfClass) IfStatement:I1 {: RESULT=new StatementIfClass(I1); RESULT.setLine(I1left); :} 
			|
			(StatementForClass) ForStatement:F1 {: RESULT=new StatementForClass(F1); RESULT.setLine(F1left); :}
			|
			(StatementBreakClass) BREAK SEPARATOR {: RESULT=new StatementBreakClass(); :}
			|
			(StatementContinueClass) CONTINUE SEPARATOR {: RESULT=new StatementContinueClass(); :}
			|
			(StatementReturnClass) RETURN OptionalExpr:O1 SEPARATOR {: RESULT=new StatementReturnClass(O1); RESULT.setLine(O1left); :}
			|
			(StatementReadClass) READ LEFT_PARENTHESIS Designator:D1 RIGHT_PARENTHESIS SEPARATOR {: RESULT=new StatementReadClass(D1); RESULT.setLine(D1left); :}
			|
			(StatementPrintClass) PRINT LEFT_PARENTHESIS Expr:E1 OptionalCommaNumConst:O2 RIGHT_PARENTHESIS SEPARATOR {: RESULT=new StatementPrintClass(E1, O2); RESULT.setLine(E1left); :}
			|
			(StatementStatementListClass) LEFT_BRACE StatementList:S1 RIGHT_BRACE {: RESULT=new StatementStatementListClass(S1); RESULT.setLine(S1left); :}
			;

IfStatement ::=  (IfStatementClass) IF LEFT_PARENTHESIS Condition:C1 RIGHT_PARENTHESIS Statement:S2 OptionalElse:O3 {: RESULT=new IfStatementClass(C1, S2, O3); RESULT.setLine(C1left); :}
			;
		
OptionalElse ::= (OptionalElseClass) ELSE Statement:S1 {: RESULT=new OptionalElseClass(S1); RESULT.setLine(S1left); :}
				|
				(NoOptionalElseClass) {: RESULT=new NoOptionalElseClass(); :} /* epsilon */
				;
			
ForStatement ::= (ForStatementClass) FOR LEFT_PARENTHESIS OptionalDesignatorStatement:O1 SEPARATOR OptionalCondition:O2 SEPARATOR OptionalDesignatorStatement:O3 RIGHT_PARENTHESIS Statement:S4 {: RESULT=new ForStatementClass(O1, O2, O3, S4); RESULT.setLine(O1left); :}
			;
			
OptionalCondition ::= (OptionalConditionClass) Condition:C1 {: RESULT=new OptionalConditionClass(C1); RESULT.setLine(C1left); :} 
					|
					(NoOptionalConditionClass) {: RESULT=new NoOptionalConditionClass(); :} /* epsilon */
					;
			
OptionalDesignatorStatement ::= (OptionalDesignatorStatementClass) DesignatorStatement:D1 {: RESULT=new OptionalDesignatorStatementClass(D1); RESULT.setLine(D1left); :}
							|
							(NoOptionalDesignatorStatementClass) {: RESULT=new NoOptionalDesignatorStatementClass(); :} /* epsilon */
							;
						
OptionalExpr ::= (OptionalExprClass) Expr:E1 {: RESULT=new OptionalExprClass(E1); RESULT.setLine(E1left); :}
				|
				(NoOptionalExprClass) {: RESULT=new NoOptionalExprClass(); :} /* epsilon */
				;
	
OptionalCommaNumConst ::= (OptionalComaNumberConstClass) COMMA INT_VALUE:I1 {: RESULT=new OptionalComaNumberConstClass(I1); RESULT.setLine(I1left); :}
						|
						(NoOptionalComaNumberConstClass) {: RESULT=new NoOptionalComaNumberConstClass(); :} /* espilon */
						;		
			
StatementList ::= (StatementListClass) StatementList:S1 Statement:S2 {: RESULT=new StatementListClass(S1, S2); RESULT.setLine(S1left); :}
				|
				(NoStatementListClass) {: RESULT=new NoStatementListClass(); :} /* epsilon */
				;

DesignatorStatement ::= (DesignatorStatementClass) Designator:D1 DesignatorStatementOption:D2 {: RESULT=new DesignatorStatementClass(D1, D2); RESULT.setLine(D1left); :}
					;
					
DesignatorStatementOption ::= (DesignatorStatementAssignOptionClass) Assignop:A1 Expr:E2 {: RESULT=new DesignatorStatementAssignOptionClass(A1, E2); RESULT.setLine(A1left); :}
							|
							(DesignatorStatementParamsOptionClass) LEFT_PARENTHESIS OptionalActPars:O1 RIGHT_PARENTHESIS {: RESULT=new DesignatorStatementParamsOptionClass(O1); RESULT.setLine(O1left); :}
							|
							(DesignatorStatementIncrementOptionClass) INCREMENT {: RESULT=new DesignatorStatementIncrementOptionClass(); :}
							|
							(DesignatorStatementDecrementOptionClass) DECREMENT {: RESULT=new DesignatorStatementDecrementOptionClass(); :}
							;												

ActPars ::= (ActParamsClass) Expr:E1 ExprList:E2 {: RESULT=new ActParamsClass(E1, E2); RESULT.setLine(E1left); :}
		;
		
ExprList ::= (ExpressionListClass) ExprList:E1 COMMA Expr:E2 {: RESULT=new ExpressionListClass(E1, E2); RESULT.setLine(E1left); :}
			|
			(NoExpressionListClass) {: RESULT=new NoExpressionListClass(); :} /* epsilon */
			;

Condition ::= (ConditionClass) CondTerm:C1 OrCondFactList:O2 {: RESULT=new ConditionClass(C1, O2); RESULT.setLine(C1left); :}
			;
			
OrCondFactList ::= (OrConditionFactListClass) OrCondFactList:O1 OR CondFact:C2 {: RESULT=new OrConditionFactListClass(O1, C2); RESULT.setLine(O1left); :}
				|
				(NoOrConditionFactListClass) {: RESULT=new NoOrConditionFactListClass(); :} /* epsilon */
				;				

CondTerm ::= (ConditionTermClass) CondFact:C1 AndCondFactList:A2 {: RESULT=new ConditionTermClass(C1, A2); RESULT.setLine(C1left); :}
			;
			
AndCondFactList ::= (AndConditionFactListClass) AndCondFactList:A1 AND CondFact:C2 {: RESULT=new AndConditionFactListClass(A1, C2); RESULT.setLine(A1left); :}
				|
				(NoAndConditionFactListClass) {: RESULT=new NoAndConditionFactListClass(); :} /* epsilon */
				;	

CondFact ::= (ConditionFactClass) Expr:E1 OptionalRelopExpr:O2 {: RESULT=new ConditionFactClass(E1, O2); RESULT.setLine(E1left); :}
		;
		
OptionalRelopExpr ::= (OptionalRelopExprClassClass) Relop:R1 Expr:E2 {: RESULT=new OptionalRelopExprClassClass(R1, E2); RESULT.setLine(R1left); :}
					|
					(NoOptionalRelopExprClassClass) {: RESULT=new NoOptionalRelopExprClassClass(); :} /* epsilon */
					;


Expr ::= (ExpressionClass) OptionalMinus:O1 Term:T2 AddopTermList:A3 {: RESULT=new ExpressionClass(O1, T2, A3); RESULT.setLine(O1left); :}
		;
		
OptionalMinus ::= (OptionalSubtractClass) SUBTRACT {: RESULT=new OptionalSubtractClass(); :} 
				|
				(NoOptionalSubtractClass) {: RESULT=new NoOptionalSubtractClass(); :} /* epsilon */
				;

AddopTermList ::= (AddOperationtermListClass) AddopTermList:A1 Addop:A2 Term:T3 {: RESULT=new AddOperationtermListClass(A1, A2, T3); RESULT.setLine(A1left); :}
				|
				(NoAddOperationtermListClass) {: RESULT=new NoAddOperationtermListClass(); :}/* epilon */
				;

Term ::= (TermClass) Factor:F1 MulopFactorList:M2 {: RESULT=new TermClass(F1, M2); RESULT.setLine(F1left); :}
		;

MulopFactorList ::= (MulOperationFactorListClass) MulopFactorList:M1 Mulop:M2 Factor:F3 {: RESULT=new MulOperationFactorListClass(M1, M2, F3); RESULT.setLine(M1left); :}
				|
				(NoMulOperationFactorListClass) {: RESULT=new NoMulOperationFactorListClass(); :} /* epilon */
				;

Factor ::= (FactorDesignatorClass) DesignatorFactor:D1 {: RESULT=new FactorDesignatorClass(D1); RESULT.setLine(D1left); :}
		|
		(FactorIntClass) INT_VALUE:I1 {: RESULT=new FactorIntClass(I1); RESULT.setLine(I1left); :}
		|
		(FactorCharClass) CHAR_VALUE:C1 {: RESULT=new FactorCharClass(C1); RESULT.setLine(C1left); :}
		|
		(FactorBoolClass) BOOL_VALUE:B1 {: RESULT=new FactorBoolClass(B1); RESULT.setLine(B1left); :}
		|
		(FactorNewClass) NewFactor:N1 {: RESULT=new FactorNewClass(N1); RESULT.setLine(N1left); :}
		|
		(FactorNullClass) NULL {: RESULT=new FactorNullClass(); :}
		|
		(FactorExpressionClass) LEFT_PARENTHESIS Expr:E1 RIGHT_PARENTHESIS {: RESULT=new FactorExpressionClass(E1); RESULT.setLine(E1left); :}
		;
		
DesignatorFactor ::= (DesignatorFactorClass) Designator:D1 OptionalDesignatorCallParams:O2 {: RESULT=new DesignatorFactorClass(D1, O2); RESULT.setLine(D1left); :}
				;
				
OptionalDesignatorCallParams ::= (OptionalDesignatorCallParamsClass) DesignatorCallParams:D1 {: RESULT=new OptionalDesignatorCallParamsClass(D1); RESULT.setLine(D1left); :}
								|
								(NoOptionalDesignatorCallParamsClass) {: RESULT=new NoOptionalDesignatorCallParamsClass(); :} /* epsilon */
								;
	
DesignatorCallParams ::= (DesignatorCallParamsClass) LEFT_PARENTHESIS OptionalActPars:O1 RIGHT_PARENTHESIS {: RESULT=new DesignatorCallParamsClass(O1); RESULT.setLine(O1left); :}
					;
					
OptionalActPars ::= (OptionalActParsClass) ActPars:A1 {: RESULT=new OptionalActParsClass(A1); RESULT.setLine(A1left); :}
				|
				(NoOptionalActParsClass) {: RESULT=new NoOptionalActParsClass(); :} /* epsilon */
				;
		
NewFactor ::= (NewFactorClass) NEW Type:T1 OptionalArraySelector:O2 {: RESULT=new NewFactorClass(T1, O2); RESULT.setLine(T1left); :}
			;

OptionalArraySelector ::= (OptionalArraySelectorClass) ArraySelector:A1 {: RESULT=new OptionalArraySelectorClass(A1); RESULT.setLine(A1left); :}
						|
						(NoOptionalArraySelectorClass) {: RESULT=new NoOptionalArraySelectorClass(); :} /* epsilon */
						;

Designator ::= (DesignatorClass) IDENTIFIER:I1 DesignatorSelectorList:D2 {: RESULT=new DesignatorClass(I1, D2); RESULT.setLine(I1left); :}
			;
			
DesignatorSelectorList ::= (DesignatorSelectorListClass) DesignatorSelectorList:D1 DesignatorSelector:D2 {: RESULT=new DesignatorSelectorListClass(D1, D2); RESULT.setLine(D1left); :}
						|
						(NoDesignatorSelectorListClass) {: RESULT=new NoDesignatorSelectorListClass(); :} /* epsilon */
						;
						
DesignatorSelector ::= (DesignatorSelectorPointClass) PointSelector:P1 {: RESULT=new DesignatorSelectorPointClass(P1); RESULT.setLine(P1left); :}
					|
					(DesignatorSelectorArrayClass) ArraySelector:A1 {: RESULT=new DesignatorSelectorArrayClass(A1); RESULT.setLine(A1left); :}
					;
	
PointSelector ::= (PointSelectorClass) POINT IDENTIFIER:I1 {: RESULT=new PointSelectorClass(I1); RESULT.setLine(I1left); :}
				;

ArraySelector ::= (ArraySelectorClass) LEFT_BRACKET Expr:E1 RIGHT_BRACKET {: RESULT=new ArraySelectorClass(E1); RESULT.setLine(E1left); :}
				;

Assignop ::= (AssignOperationClass) ASSIGN {: RESULT=new AssignOperationClass(); :} 	
			;

Relop ::= (RelopEqClass) EQUAL {: RESULT=new RelopEqClass(); :}
		|
		(RelopNeqClass) NOT_EQUAL {: RESULT=new RelopNeqClass(); :}
		|
		(RelopGtClass) GREATER {: RESULT=new RelopGtClass(); :}
		|
		(RelopGeClass) GREATER_EQUAL {: RESULT=new RelopGeClass(); :}
		|
		(RelopLtClass) LESS {: RESULT=new RelopLtClass(); :}
		|
		(RelopLeClass) LESS_EQUAL {: RESULT=new RelopLeClass(); :}
		;

Addop ::= (AddopPlusClass) ADD {: RESULT=new AddopPlusClass(); :}
		|
		(AddOpMinusClass) SUBTRACT {: RESULT=new AddOpMinusClass(); :}
		;

Mulop ::= (MulopMullClass) MULTIPLY {: RESULT=new MulopMullClass(); :} 
		|
		(MulopDivClass) DIVIDE {: RESULT=new MulopDivClass(); :}
		|
		(MulopModClass) MODULO {: RESULT=new MulopModClass(); :}
		;


