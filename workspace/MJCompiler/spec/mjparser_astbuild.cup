

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());   

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }      
  	public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska: ", cur_token);
    }	
	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("\nFatalna greska, parsiranje ne moze da se nastavi: ", cur_token);
    }      
    public void report_error(String message, Object info) {
		errorDetected = true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append("'").append(((Symbol)info).value).append("' na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }  
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
        	msg.append("'").append(((Symbol)info).value).append("' na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal INT, BOOL, CHAR;
terminal NULL;
terminal ADD, SUBTRACT, MULTIPLY, DIVIDE, MODULO;
terminal EQUAL, NOT_EQUAL, GREATER, GREATER_EQUAL, LESS, LESS_EQUAL;
terminal AND, OR;
terminal ASSIGN;
terminal INCREMENT, DECREMENT;
terminal SEPARATOR, COMMA, POINT;
terminal LEFT_PARENTHESIS, RIGHT_PARENTHESIS, LEFT_BRACKET, RIGHT_BRACKET, LEFT_BRACE, RIGHT_BRACE;
terminal PROGRAM, CLASS, EXTENDS, INTERFACE, IMPLEMENTS, ENUM, IF, ELSE, NEW, FOR, RETURN, BREAK, CONTINUE, PRINT, READ, VOID, CONST;
terminal CHR, ORD, LEN;
terminal Integer INT_VALUE;
terminal Integer CHAR_VALUE;
terminal Integer BOOL_VALUE;
terminal String IDENTIFIER;
terminal ERROR;

nonterminal Program Program;
nonterminal DeclList DeclList;
nonterminal Decl Decl;
nonterminal ConstDecl ConstDecl;
nonterminal AssignConstList AssignConstList;
nonterminal EnumDecl EnumDecl;
nonterminal OptionalAssignNum OptionalAssignNum;
nonterminal AssignNum AssignNum;
nonterminal IdentOptionalAssignNumList IdentOptionalAssignNumList;
nonterminal VarDecl VarDecl;
nonterminal VarList VarList;
nonterminal ClassDecl ClassDecl;
nonterminal OptionalExtendsType OptionalExtendsType;
nonterminal ClassVarDeclList ClassVarDeclList;
nonterminal InterfaceImplList InterfaceImplList;
nonterminal InterfaceList InterfaceList;
nonterminal OptionalMethodDeclList OptionalMethodDeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal InterfaceDecl InterfaceDecl;
nonterminal InterfaceMethodDeclList InterfaceMethodDeclList;
nonterminal InterfaceMethodDecl InterfaceMethodDecl;
nonterminal MethodDecl MethodDecl;
nonterminal OptionalBrackets OptionalBrackets;
nonterminal VarDeclList VarDeclList;
nonterminal FormPars FormPars;
nonterminal FormPar FormPar;
nonterminal Statement Statement;
nonterminal IfStatement IfStatement;
nonterminal AssignConst AssignConst;
nonterminal OptionalElse OptionalElse;
nonterminal ForStatement ForStatement;
nonterminal OptionalCondition OptionalCondition;
nonterminal OptionalDesignatorStatement OptionalDesignatorStatement;
nonterminal OptionalExpr OptionalExpr;
nonterminal PrintNumParameter PrintNumParameter;
nonterminal StatementList StatementList;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal ActPars ActPars;
nonterminal Condition Condition;
nonterminal OrCondFactList OrCondFactList;
nonterminal CondTerm CondTerm;
nonterminal AndCondFactList AndCondFactList;
nonterminal CondFact CondFact;
nonterminal OptionalRelopExpr OptionalRelopExpr; 
nonterminal Assignop Assignop;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgramStart, MethodStart, Designator, StandardFunction;
nonterminal rs.etf.pp1.symboltable.concepts.Struct ClassStart, Factor, Expr, Term, Type, ReturnType;
nonterminal rs.ac.bg.etf.pp1.mysymboltable.Constant ConstValue;
nonterminal rs.ac.bg.etf.pp1.mysymboltable.Variable VarName;

precedence left ELSE;

Program ::= (Program) ProgramStart:P1 DeclList:D2 LEFT_BRACE MethodDeclList:M3 RIGHT_BRACE {: RESULT=new Program(P1, D2, M3); RESULT.setLine(P1left); :}
        ;

ProgramStart ::= (ProgramStart) PROGRAM IDENTIFIER:programName {: RESULT=new ProgramStart(programName); RESULT.setLine(programNameleft); :}
                ;

DeclList ::= (DeclarationList) DeclList:D1 Decl:D2 {: RESULT=new DeclarationList(D1, D2); RESULT.setLine(D1left); :}
			| (DeclarationListNO) {: RESULT=new DeclarationListNO(); :} /*epsilon */
            ;

Decl ::= (Declaration) ConstDecl:C1 {: RESULT=new Declaration(C1); RESULT.setLine(C1left); :}
        | (DeclarationVar) VarDecl:V1 {: RESULT=new DeclarationVar(V1); RESULT.setLine(V1left); :}
        | (DeclarationClass) ClassDecl:C1 {: RESULT=new DeclarationClass(C1); RESULT.setLine(C1left); :}
        | (DeclarationEnum) EnumDecl:E1 {: RESULT=new DeclarationEnum(E1); RESULT.setLine(E1left); :}
        | (DeclarationInterface) InterfaceDecl:I1 {: RESULT=new DeclarationInterface(I1); RESULT.setLine(I1left); :}
        ;	

ConstDecl ::= (ConstDecl) CONST Type:constType AssignConstList:A1 SEPARATOR {: RESULT=new ConstDecl(constType, A1); RESULT.setLine(constTypeleft); :}
            ; 
			
AssignConstList ::= (AssignConstantList) AssignConstList:A1 COMMA AssignConst:A2 {: RESULT=new AssignConstantList(A1, A2); RESULT.setLine(A1left); :}
				| (AssignConstantListEnd) AssignConst:A1 {: RESULT=new AssignConstantListEnd(A1); RESULT.setLine(A1left); :}
                ;
	
AssignConst ::= (AssignConst)  IDENTIFIER:constName ASSIGN ConstValue:constValue {: RESULT=new AssignConst(constName, constValue); RESULT.setLine(constNameleft); :}
            ;					

ConstValue ::= (ConstValueInt) INT_VALUE:value {: RESULT=new ConstValueInt(value); RESULT.setLine(valueleft); :} 
			| (ConstValueChar) CHAR_VALUE:value {: RESULT=new ConstValueChar(value); RESULT.setLine(valueleft); :} 
			| (ConstValueBool) BOOL_VALUE:value {: RESULT=new ConstValueBool(value); RESULT.setLine(valueleft); :}
            ;

EnumDecl ::= (EnumDecl) ENUM IDENTIFIER:I1 LEFT_BRACE IDENTIFIER:I2 OptionalAssignNum:O3 IdentOptionalAssignNumList:I4 RIGHT_BRACE {: RESULT=new EnumDecl(I1, I2, O3, I4); RESULT.setLine(I1left); :}
            ;

OptionalAssignNum ::= (OptionalAssgnNumberClass) AssignNum:A1 {: RESULT=new OptionalAssgnNumberClass(A1); RESULT.setLine(A1left); :}
					| (NoOptionalAssgnNumberClass) {: RESULT=new NoOptionalAssgnNumberClass(); :} /* epsilon */
                    ;					
					
AssignNum ::= (AssignNum) ASSIGN INT_VALUE:I1 {: RESULT=new AssignNum(I1); RESULT.setLine(I1left); :}
            ;


IdentOptionalAssignNumList ::= (IdentifierOptionalAssignNumberListClass) IdentOptionalAssignNumList:I1 COMMA IDENTIFIER:I2 OptionalAssignNum:O3 {: RESULT=new IdentifierOptionalAssignNumberListClass(I1, I2, O3); RESULT.setLine(I1left); :}
							| (NoIdentifierOptionalAssignNumberListClass) {: RESULT=new NoIdentifierOptionalAssignNumberListClass(); :} /* epsilon */
                            ;

VarDecl ::= (VarDecl) Type:varType VarList:V1 SEPARATOR {: RESULT=new VarDecl(varType, V1); RESULT.setLine(varTypeleft); :}
        ;
		
VarList ::= (VariableList) VarList:V1 COMMA VarName:V2 {: RESULT=new VariableList(V1, V2); RESULT.setLine(V1left); :}
			| (VariableListEnd) VarName:V1 {: RESULT=new VariableListEnd(V1); RESULT.setLine(V1left); :} /* epsilon */
            ;
			
VarName ::= (VarName) IDENTIFIER:varName OptionalBrackets:brackets {: RESULT=new VarName(varName, brackets); RESULT.setLine(varNameleft); :}
        ;

ClassDecl ::= (ClassDecl) ClassStart:C1 OptionalExtendsType:O2 InterfaceImplList:I3 LEFT_BRACE ClassVarDeclList:C4 OptionalMethodDeclList:O5 RIGHT_BRACE {: RESULT=new ClassDecl(C1, O2, I3, C4, O5); RESULT.setLine(C1left); :}
            ;

ClassVarDeclList ::= (ClassVarDeclList) VarDeclList:V1 {: RESULT=new ClassVarDeclList(V1); RESULT.setLine(V1left); :}
                ;

ClassStart ::= (ClassStart) CLASS IDENTIFIER:className {: RESULT=new ClassStart(className); RESULT.setLine(classNameleft); :}
            ;
			
OptionalExtendsType ::= (ExtendsType) EXTENDS Type:type {: RESULT=new ExtendsType(type); RESULT.setLine(typeleft); :}
					| (ExtendsTypeNO) {: RESULT=new ExtendsTypeNO(); :} /* epsilon */
					;					

InterfaceImplList ::= (InterfaceImplementsList) IMPLEMENTS InterfaceList:I1 {: RESULT=new InterfaceImplementsList(I1); RESULT.setLine(I1left); :}
                    | (InterfaceImplementsListNO) {: RESULT=new InterfaceImplementsListNO(); :} /* epsilon */
                    ;
            
InterfaceList ::= (Interfaces) InterfaceList:I1 COMMA Type:type {: RESULT=new Interfaces(I1, type); RESULT.setLine(I1left); :}
                | (Interface) Type:type {: RESULT=new Interface(type); RESULT.setLine(typeleft); :}
                | (InterfacesNO) {: RESULT=new InterfacesNO(); :} /* epsilon */
                ;
			
OptionalMethodDeclList ::= (OptionalMethodDeclarationListClass) LEFT_BRACE MethodDeclList:M1 RIGHT_BRACE {: RESULT=new OptionalMethodDeclarationListClass(M1); RESULT.setLine(M1left); :}
						| (NoOptionalMethodDeclarationListClass) {: RESULT=new NoOptionalMethodDeclarationListClass(); :} /* epsilon */
						;
								
MethodDeclList ::= (MethodDeclarationListClass) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarationListClass(M1, M2); RESULT.setLine(M1left); :}
			| (NoMethodDeclarationListClass) {: RESULT=new NoMethodDeclarationListClass(); :}/* epsilon */
			;


InterfaceDecl ::= (InterfaceDeclarationClass) INTERFACE IDENTIFIER:I1 LEFT_BRACE InterfaceMethodDeclList:I2 RIGHT_BRACE {: RESULT=new InterfaceDeclarationClass(I1, I2); RESULT.setLine(I1left); :}
				;

InterfaceMethodDeclList ::= (InterfaceMethodDeclListClass) InterfaceMethodDeclList:I1 InterfaceMethodDecl:I2 {: RESULT=new InterfaceMethodDeclListClass(I1, I2); RESULT.setLine(I1left); :}
						| (NoInterfaceMethodDeclListClass) {: RESULT=new NoInterfaceMethodDeclListClass(); :} /* epsilon */
						;

InterfaceMethodDecl ::= (InterfaceMethodDeclarationClass) ReturnType:R1 IDENTIFIER:I2 LEFT_PARENTHESIS FormPars:F3 RIGHT_PARENTHESIS SEPARATOR {: RESULT=new InterfaceMethodDeclarationClass(R1, I2, F3); RESULT.setLine(R1left); :}
					;

MethodDecl ::= (MethodDecl) MethodStart:M1 LEFT_PARENTHESIS FormPars:F2 RIGHT_PARENTHESIS VarDeclList:V3 LEFT_BRACE StatementList:S4 RIGHT_BRACE {: RESULT=new MethodDecl(M1, F2, V3, S4); RESULT.setLine(M1left); :}
			;

MethodStart ::= (MethodStart) ReturnType:R1 IDENTIFIER:methodName {: RESULT=new MethodStart(R1, methodName); RESULT.setLine(R1left); :}
			;
	
ReturnType ::= (ReturnT) Type:T1 {: RESULT=new ReturnT(T1); RESULT.setLine(T1left); :}
			| (ReturnVoid) VOID {: RESULT=new ReturnVoid(); :}
			;
			
FormPars ::= (FormalParameters) FormPars:F1 COMMA FormPar:F2 {: RESULT=new FormalParameters(F1, F2); RESULT.setLine(F1left); :}				
			| (FormalParameter) FormPar:F1 {: RESULT=new FormalParameter(F1); RESULT.setLine(F1left); :}
			| (FormalParametersNO) {: RESULT=new FormalParametersNO(); :}	/* epsilon */
			;


VarDeclList ::= (VariableDeclList) VarDeclList:V1 VarDecl:V2 {: RESULT=new VariableDeclList(V1, V2); RESULT.setLine(V1left); :}
			| (VariableDeclListNO) {: RESULT=new VariableDeclListNO(); :} /* epsilon */
			;
				
FormPar ::= (FormPar) Type:T1 VarName:V2 {: RESULT=new FormPar(T1, V2); RESULT.setLine(T1left); :} 
			;
			
OptionalBrackets ::= (Brackets) LEFT_BRACKET RIGHT_BRACKET {: RESULT=new Brackets(); :}
				| (BracketsNO) {: RESULT=new BracketsNO(); :} /* epsilon */
				;

Type ::= (TypeInt) INT {: RESULT=new TypeInt(); :}
		| (TypeBool) BOOL {: RESULT=new TypeBool(); :}
		| (TypeChar) CHAR {: RESULT=new TypeChar(); :}
		| (TypeCustom) IDENTIFIER:typeName {: RESULT=new TypeCustom(typeName); RESULT.setLine(typeNameleft); :}
		;

StandardFunction ::= (StandardFunctionChr) CHR LEFT_PARENTHESIS Expr:E1 RIGHT_PARENTHESIS {: RESULT=new StandardFunctionChr(E1); RESULT.setLine(E1left); :}
                    | (StandardFunctionOrd) ORD LEFT_PARENTHESIS Expr:E1 RIGHT_PARENTHESIS {: RESULT=new StandardFunctionOrd(E1); RESULT.setLine(E1left); :}
                    | (StandardFunctionLen) LEN LEFT_PARENTHESIS Expr:E1 RIGHT_PARENTHESIS {: RESULT=new StandardFunctionLen(E1); RESULT.setLine(E1left); :}
                    ;

Statement ::= (StatementDesignator) DesignatorStatement:D1 SEPARATOR {: RESULT=new StatementDesignator(D1); RESULT.setLine(D1left); :}
			| (StatementIf) IfStatement:I1 {: RESULT=new StatementIf(I1); RESULT.setLine(I1left); :} 
			| (StatementFor) ForStatement:F1 {: RESULT=new StatementFor(F1); RESULT.setLine(F1left); :}
			| (StatementBreak) BREAK SEPARATOR {: RESULT=new StatementBreak(); :}
			| (StatementContinue) CONTINUE SEPARATOR {: RESULT=new StatementContinue(); :}
			| (StatementReturn) RETURN SEPARATOR {: RESULT=new StatementReturn(); :}
			| (StatementReturnExpr) RETURN Expr:E1 SEPARATOR {: RESULT=new StatementReturnExpr(E1); RESULT.setLine(E1left); :}
			| (StatementRead) READ LEFT_PARENTHESIS Designator:D1 RIGHT_PARENTHESIS SEPARATOR {: RESULT=new StatementRead(D1); RESULT.setLine(D1left); :}
			| (StatementPrint) PRINT LEFT_PARENTHESIS Expr:E1 PrintNumParameter:P2 RIGHT_PARENTHESIS SEPARATOR {: RESULT=new StatementPrint(E1, P2); RESULT.setLine(E1left); :}
			| (StatementBlock) LEFT_BRACE StatementList:S1 RIGHT_BRACE {: RESULT=new StatementBlock(S1); RESULT.setLine(S1left); :}
			;

IfStatement ::=  (IfStatementClass) IF LEFT_PARENTHESIS Condition:C1 RIGHT_PARENTHESIS Statement:S2 OptionalElse:O3 {: RESULT=new IfStatementClass(C1, S2, O3); RESULT.setLine(C1left); :}
			;
		
OptionalElse ::= (OptionalElseClass) ELSE Statement:S1 {: RESULT=new OptionalElseClass(S1); RESULT.setLine(S1left); :}
				| (NoOptionalElseClass) {: RESULT=new NoOptionalElseClass(); :} /* epsilon */
				;
			
ForStatement ::= (ForStatementClass) FOR LEFT_PARENTHESIS OptionalDesignatorStatement:O1 SEPARATOR OptionalCondition:O2 SEPARATOR OptionalDesignatorStatement:O3 RIGHT_PARENTHESIS Statement:S4 {: RESULT=new ForStatementClass(O1, O2, O3, S4); RESULT.setLine(O1left); :}
			;
			
OptionalCondition ::= (OptionalConditionClass) Condition:C1 {: RESULT=new OptionalConditionClass(C1); RESULT.setLine(C1left); :} 
					| (NoOptionalConditionClass) {: RESULT=new NoOptionalConditionClass(); :} /* epsilon */
					;
			
OptionalDesignatorStatement ::= (OptionalDesignatorStatementClass) DesignatorStatement:D1 {: RESULT=new OptionalDesignatorStatementClass(D1); RESULT.setLine(D1left); :}
							| (NoOptionalDesignatorStatementClass) {: RESULT=new NoOptionalDesignatorStatementClass(); :} /* epsilon */
							;
						
OptionalExpr ::= (OptionalExprClass) Expr:E1 {: RESULT=new OptionalExprClass(E1); RESULT.setLine(E1left); :}
				| (NoOptionalExprClass) {: RESULT=new NoOptionalExprClass(); :} /* epsilon */
				;
	
PrintNumParameter ::= (PrintNumberParameter) COMMA INT_VALUE:I1 {: RESULT=new PrintNumberParameter(I1); RESULT.setLine(I1left); :}
                | (PrintNumberParameterNO) {: RESULT=new PrintNumberParameterNO(); :} /* espilon */
                ;		
			
StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}
				| (StatementsNO) {: RESULT=new StatementsNO(); :} /* epsilon */
				;

DesignatorStatement ::= (DesignatorAssign) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new DesignatorAssign(D1, A2, E3); RESULT.setLine(D1left); :}
                    | (DesignatorStandardFunction) StandardFunction:S1 {: RESULT=new DesignatorStandardFunction(S1); RESULT.setLine(S1left); :}
                    | (DesignatorFunctionCall) Designator:D1 LEFT_PARENTHESIS ActPars:A2 RIGHT_PARENTHESIS {: RESULT=new DesignatorFunctionCall(D1, A2); RESULT.setLine(D1left); :}
                    | (DesignatorIncrement) Designator:D1 INCREMENT {: RESULT=new DesignatorIncrement(D1); RESULT.setLine(D1left); :}
                    | (DesignatorDecrement) Designator:D1 DECREMENT {: RESULT=new DesignatorDecrement(D1); RESULT.setLine(D1left); :}
					;		

ActPars ::= (ActParameter) Expr:E1 {: RESULT=new ActParameter(E1); RESULT.setLine(E1left); :}
        | (ActParameters) ActPars:A1 COMMA Expr:E2 {: RESULT=new ActParameters(A1, E2); RESULT.setLine(A1left); :}
        | (ActParametersNO) {: RESULT=new ActParametersNO(); :} /* epsilon */
		;
		
Condition ::= (ConditionClass) CondTerm:C1 OrCondFactList:O2 {: RESULT=new ConditionClass(C1, O2); RESULT.setLine(C1left); :}
			;
			
OrCondFactList ::= (OrConditionFactListClass) OrCondFactList:O1 OR CondFact:C2 {: RESULT=new OrConditionFactListClass(O1, C2); RESULT.setLine(O1left); :}
				| (NoOrConditionFactListClass) {: RESULT=new NoOrConditionFactListClass(); :} /* epsilon */
				;				

CondTerm ::= (ConditionTermClass) CondFact:C1 AndCondFactList:A2 {: RESULT=new ConditionTermClass(C1, A2); RESULT.setLine(C1left); :}
			;
			
AndCondFactList ::= (AndConditionFactListClass) AndCondFactList:A1 AND CondFact:C2 {: RESULT=new AndConditionFactListClass(A1, C2); RESULT.setLine(A1left); :}
				| (NoAndConditionFactListClass) {: RESULT=new NoAndConditionFactListClass(); :} /* epsilon */
				;	

CondFact ::= (ConditionFactClass) Expr:E1 OptionalRelopExpr:O2 {: RESULT=new ConditionFactClass(E1, O2); RESULT.setLine(E1left); :}
		;
		
OptionalRelopExpr ::= (OptionalRelopExprClassClass) Relop:R1 Expr:E2 {: RESULT=new OptionalRelopExprClassClass(R1, E2); RESULT.setLine(R1left); :}
					| (NoOptionalRelopExprClassClass) {: RESULT=new NoOptionalRelopExprClassClass(); :} /* epsilon */
					;

Expr ::= (ExprTerm) Term:T1 {: RESULT=new ExprTerm(T1); RESULT.setLine(T1left); :}
        | (ExprNegativeTerm) SUBTRACT Term:T1 {: RESULT=new ExprNegativeTerm(T1); RESULT.setLine(T1left); :}
        | (ExprAddop) Expr:E1 Addop:A2 Term:T3 {: RESULT=new ExprAddop(E1, A2, T3); RESULT.setLine(E1left); :}
		;		

Term ::= (TermFactor) Factor:F1 {: RESULT=new TermFactor(F1); RESULT.setLine(F1left); :} 
        | (TermMulop) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new TermMulop(T1, M2, F3); RESULT.setLine(T1left); :}
		;			

Factor ::= (FactorDesignator) Designator:D1 {: RESULT=new FactorDesignator(D1); RESULT.setLine(D1left); :}
        | (FactorStandardFunction) StandardFunction:S1 {: RESULT=new FactorStandardFunction(S1); RESULT.setLine(S1left); :}
        | (FactorFunctionCall) Designator:D1 LEFT_PARENTHESIS ActPars:A2 RIGHT_PARENTHESIS {: RESULT=new FactorFunctionCall(D1, A2); RESULT.setLine(D1left); :}
		| (FactorConst) ConstValue:C1 {: RESULT=new FactorConst(C1); RESULT.setLine(C1left); :}	
		| (FactorNewObj) NEW Type:T1 {: RESULT=new FactorNewObj(T1); RESULT.setLine(T1left); :}
        | (FactorNewArray) NEW Type:T1 LEFT_BRACKET Expr:E2 RIGHT_BRACKET {: RESULT=new FactorNewArray(T1, E2); RESULT.setLine(T1left); :}
		| (FactorNull) NULL {: RESULT=new FactorNull(); :}
		| (FactorExpression) LEFT_PARENTHESIS Expr:E1 RIGHT_PARENTHESIS {: RESULT=new FactorExpression(E1); RESULT.setLine(E1left); :}
		;		
					
Designator ::= (DesignatorName) IDENTIFIER:name {: RESULT=new DesignatorName(name); RESULT.setLine(nameleft); :}
            | (DesignatorPointAccess) Designator:D1 POINT IDENTIFIER:name {: RESULT=new DesignatorPointAccess(D1, name); RESULT.setLine(D1left); :}
            | (DesignatorArrayAccess) Designator:D1 LEFT_BRACKET Expr:E2 RIGHT_BRACKET {: RESULT=new DesignatorArrayAccess(D1, E2); RESULT.setLine(D1left); :}
            ;

Assignop ::= (Assignop) ASSIGN {: RESULT=new Assignop(); :} 	
			;

Relop ::= (Equal) EQUAL {: RESULT=new Equal(); :}
		| (NotEqual) NOT_EQUAL {: RESULT=new NotEqual(); :}
		| (Greater) GREATER {: RESULT=new Greater(); :}
		| (GreaterEqual) GREATER_EQUAL {: RESULT=new GreaterEqual(); :}
		| (Less) LESS {: RESULT=new Less(); :}
		| (LessEqual) LESS_EQUAL {: RESULT=new LessEqual(); :}
		;

Addop ::= (Add) ADD {: RESULT=new Add(); :}
		| (Subtract) SUBTRACT {: RESULT=new Subtract(); :}
		;

Mulop ::= (Multiplie) MULTIPLY {: RESULT=new Multiplie(); :} 
		| (Divide) DIVIDE {: RESULT=new Divide(); :}
		| (Modulo) MODULO {: RESULT=new Modulo(); :}
		;


