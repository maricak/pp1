
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Feb 06 19:19:41 CET 2019
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

/** CUP v0.10k generated parser.
  * @version Wed Feb 06 19:19:41 CET 2019
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\231\000\002\003\007\000\002\002\004\000\002\110" +
    "\002\000\002\064\005\000\002\004\004\000\002\004\002" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\006\000\002" +
    "\006\005\000\002\007\005\000\002\007\003\000\002\033" +
    "\005\000\002\033\003\000\002\106\003\000\002\106\003" +
    "\000\002\106\003\000\002\010\006\000\002\067\004\000" +
    "\002\047\005\000\002\047\003\000\002\050\003\000\002" +
    "\050\005\000\002\011\005\000\002\011\004\000\002\012" +
    "\005\000\002\012\003\000\002\107\004\000\002\107\003" +
    "\000\002\107\002\000\002\013\011\000\002\111\002\000" +
    "\002\072\005\000\002\015\003\000\002\014\004\000\002" +
    "\014\003\000\002\014\002\000\002\016\004\000\002\016" +
    "\002\000\002\017\005\000\002\017\003\000\002\017\002" +
    "\000\002\020\005\000\002\020\002\000\002\021\004\000" +
    "\002\021\002\000\002\022\006\000\002\070\004\000\002" +
    "\023\004\000\002\023\002\000\002\024\007\000\002\071" +
    "\004\000\002\112\002\000\002\025\015\000\002\113\002" +
    "\000\002\065\005\000\002\051\002\000\002\044\002\000" +
    "\002\077\003\000\002\077\003\000\002\030\005\000\002" +
    "\030\003\000\002\030\002\000\002\031\004\000\002\027" +
    "\004\000\002\027\002\000\002\026\004\000\002\026\002" +
    "\000\002\076\003\000\002\076\003\000\002\076\003\000" +
    "\002\076\003\000\002\105\006\000\002\105\006\000\002" +
    "\105\006\000\002\032\004\000\002\032\005\000\002\032" +
    "\007\000\002\032\003\000\002\032\004\000\002\032\004" +
    "\000\002\032\004\000\002\032\005\000\002\032\007\000" +
    "\002\032\010\000\002\032\005\000\002\061\003\000\002" +
    "\034\005\000\002\060\003\000\002\035\013\000\002\045" +
    "\003\000\002\036\003\000\002\036\002\000\002\062\003" +
    "\000\002\062\002\000\002\063\003\000\002\063\002\000" +
    "\002\046\003\000\002\037\004\000\002\037\002\000\002" +
    "\040\004\000\002\040\002\000\002\041\005\000\002\041" +
    "\003\000\002\041\007\000\002\041\004\000\002\041\004" +
    "\000\002\052\002\000\002\043\003\000\002\043\005\000" +
    "\002\043\002\000\002\100\004\000\002\101\005\000\002" +
    "\101\002\000\002\057\003\000\002\102\004\000\002\103" +
    "\005\000\002\103\002\000\002\104\003\000\002\104\005" +
    "\000\002\074\003\000\002\074\004\000\002\074\005\000" +
    "\002\074\003\000\002\075\003\000\002\075\005\000\002" +
    "\073\004\000\002\073\003\000\002\073\007\000\002\073" +
    "\003\000\002\073\004\000\002\073\007\000\002\073\003" +
    "\000\002\073\005\000\002\066\003\000\002\066\006\000" +
    "\002\066\007\000\002\042\002\000\002\053\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\055\003" +
    "\000\002\055\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\004\041\uffff\001\002\000\026\003\ufffc\004" +
    "\ufffc\005\ufffc\006\ufffc\037\ufffc\042\ufffc\044\ufffc\046\ufffc" +
    "\061\ufffc\070\ufffc\001\002\000\004\002\011\001\002\000" +
    "\004\041\007\001\002\000\004\070\010\001\002\000\026" +
    "\003\ufffe\004\ufffe\005\ufffe\006\ufffe\037\ufffe\042\ufffe\044" +
    "\ufffe\046\ufffe\061\ufffe\070\ufffe\001\002\000\004\002\000" +
    "\001\002\000\026\003\027\004\015\005\033\006\017\037" +
    "\014\042\uffdf\044\032\046\031\061\030\070\020\001\002" +
    "\000\004\037\367\001\002\000\016\004\uffd1\005\uffd1\006" +
    "\uffd1\040\uffd1\060\uffd1\070\uffd1\001\002\000\056\003\uffba" +
    "\010\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016" +
    "\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba" +
    "\030\uffba\031\uffba\034\uffba\035\uffba\036\uffba\037\uffba\045" +
    "\uffba\070\uffba\001\002\000\026\003\ufffb\004\ufffb\005\ufffb" +
    "\006\ufffb\037\ufffb\042\ufffb\044\ufffb\046\ufffb\061\ufffb\070" +
    "\ufffb\001\002\000\056\003\uffb8\010\uffb8\011\uffb8\012\uffb8" +
    "\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021" +
    "\uffb8\022\uffb8\023\uffb8\024\uffb8\030\uffb8\031\uffb8\034\uffb8" +
    "\035\uffb8\036\uffb8\037\uffb8\045\uffb8\070\uffb8\001\002\000" +
    "\056\003\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023" +
    "\uffb7\024\uffb7\030\uffb7\031\uffb7\034\uffb7\035\uffb7\036\uffb7" +
    "\037\uffb7\045\uffb7\070\uffb7\001\002\000\004\042\363\001" +
    "\002\000\026\003\ufff9\004\ufff9\005\ufff9\006\ufff9\037\ufff9" +
    "\042\ufff9\044\ufff9\046\ufff9\061\ufff9\070\ufff9\001\002\000" +
    "\026\003\ufffd\004\ufffd\005\ufffd\006\ufffd\037\ufffd\042\ufffd" +
    "\044\ufffd\046\ufffd\061\ufffd\070\ufffd\001\002\000\012\003" +
    "\312\030\uffe1\031\uffe1\070\314\001\002\000\026\003\ufffa" +
    "\004\ufffa\005\ufffa\006\ufffa\037\ufffa\042\ufffa\044\ufffa\046" +
    "\ufffa\061\ufffa\070\ufffa\001\002\000\026\003\ufff7\004\ufff7" +
    "\005\ufff7\006\ufff7\037\ufff7\042\ufff7\044\ufff7\046\ufff7\061" +
    "\ufff7\070\ufff7\001\002\000\004\030\355\001\002\000\014" +
    "\003\342\004\015\005\033\006\017\070\020\001\002\000" +
    "\004\070\340\001\002\000\004\070\337\001\002\000\056" +
    "\003\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\030\uffb9\031\uffb9\034\uffb9\035\uffb9\036\uffb9\037" +
    "\uffb9\045\uffb9\070\uffb9\001\002\000\026\003\ufff8\004\ufff8" +
    "\005\ufff8\006\ufff8\037\ufff8\042\ufff8\044\ufff8\046\ufff8\061" +
    "\ufff8\070\ufff8\001\002\000\004\037\326\001\002\000\012" +
    "\003\040\037\uffda\043\037\045\uffda\001\002\000\012\004" +
    "\015\005\033\006\017\070\020\001\002\000\006\037\uffdb" +
    "\045\uffdb\001\002\000\006\037\uffd8\045\043\001\002\000" +
    "\004\037\050\001\002\000\016\004\015\005\033\006\017" +
    "\031\uffd5\037\uffd5\070\020\001\002\000\006\031\uffd6\037" +
    "\uffd6\001\002\000\006\031\046\037\uffd9\001\002\000\012" +
    "\004\015\005\033\006\017\070\020\001\002\000\006\031" +
    "\uffd7\037\uffd7\001\002\000\020\003\uffbd\004\uffbd\005\uffbd" +
    "\006\uffbd\037\uffbd\040\uffbd\070\uffbd\001\002\000\006\037" +
    "\055\040\uffd3\001\002\000\020\003\027\004\015\005\033" +
    "\006\017\037\uffdd\040\uffdd\070\020\001\002\000\020\003" +
    "\uffbe\004\uffbe\005\uffbe\006\uffbe\037\uffbe\040\uffbe\070\uffbe" +
    "\001\002\000\004\040\324\001\002\000\016\004\uffd1\005" +
    "\uffd1\006\uffd1\040\uffd1\060\uffd1\070\uffd1\001\002\000\016" +
    "\004\uffc8\005\uffc8\006\uffc8\040\061\060\uffc8\070\uffc8\001" +
    "\002\000\014\004\015\005\033\006\017\060\321\070\020" +
    "\001\002\000\004\033\063\001\002\000\004\040\uffd4\001" +
    "\002\000\016\004\uffd2\005\uffd2\006\uffd2\040\uffd2\060\uffd2" +
    "\070\uffd2\001\002\000\016\004\015\005\033\006\017\031" +
    "\uffc0\034\uffc0\070\020\001\002\000\012\003\312\031\uffe1" +
    "\034\uffe1\070\314\001\002\000\006\031\067\034\uffc6\001" +
    "\002\000\006\031\uffc1\034\uffc1\001\002\000\012\004\015" +
    "\005\033\006\017\070\020\001\002\000\004\034\071\001" +
    "\002\000\016\003\uffca\004\uffca\005\uffca\006\uffca\037\uffca" +
    "\070\uffca\001\002\000\016\003\uffbd\004\uffbd\005\uffbd\006" +
    "\uffbd\037\uffbd\070\uffbd\001\002\000\016\003\027\004\015" +
    "\005\033\006\017\037\uffc5\070\020\001\002\000\004\037" +
    "\075\001\002\000\034\037\uff99\040\uff99\047\uff99\052\uff99" +
    "\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99\062\uff99\063" +
    "\uff99\064\uff99\070\uff99\001\002\000\034\037\102\040\120" +
    "\047\110\052\121\053\106\054\112\055\101\056\114\057" +
    "\100\062\117\063\104\064\122\070\107\001\002\000\016" +
    "\025\304\026\303\027\302\032\uff75\033\uff93\035\uff75\001" +
    "\002\000\004\033\273\001\002\000\004\030\272\001\002" +
    "\000\034\037\uff99\040\uff99\047\uff99\052\uff99\053\uff99\054" +
    "\uff99\055\uff99\056\uff99\057\uff99\062\uff99\063\uff99\064\uff99" +
    "\070\uff99\001\002\000\004\030\267\001\002\000\004\033" +
    "\264\001\002\000\004\033\254\001\002\000\034\003\133" +
    "\007\140\011\127\030\252\033\130\051\135\062\117\063" +
    "\104\064\122\065\141\066\132\067\137\070\107\001\002" +
    "\000\060\010\uff78\011\uff78\012\uff78\013\uff78\014\uff78\015" +
    "\uff78\016\uff78\017\uff78\020\uff78\021\uff78\022\uff78\023\uff78" +
    "\024\uff78\025\uff78\026\uff78\027\uff78\030\uff78\031\uff78\032" +
    "\uff78\033\uff78\034\uff78\035\uff78\036\uff78\001\002\000\004" +
    "\033\uffa8\001\002\000\036\037\uffb0\040\uffb0\047\uffb0\050" +
    "\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0" +
    "\062\uffb0\063\uffb0\064\uffb0\070\uffb0\001\002\000\004\030" +
    "\250\001\002\000\006\030\uff97\034\uff97\001\002\000\004" +
    "\033\241\001\002\000\004\033\203\001\002\000\034\037" +
    "\uff9a\040\uff9a\047\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a" +
    "\056\uff9a\057\uff9a\062\uff9a\063\uff9a\064\uff9a\070\uff9a\001" +
    "\002\000\004\033\200\001\002\000\016\004\uffc9\005\uffc9" +
    "\006\uffc9\040\uffc9\060\uffc9\070\uffc9\001\002\000\004\033" +
    "\uffa4\001\002\000\004\033\123\001\002\000\032\003\133" +
    "\007\140\011\127\033\130\051\135\062\117\063\104\064" +
    "\122\065\141\066\132\067\137\070\107\001\002\000\052" +
    "\010\uff75\011\uff75\012\uff75\013\uff75\014\uff75\015\uff75\016" +
    "\uff75\017\uff75\020\uff75\021\uff75\022\uff75\023\uff75\024\uff75" +
    "\030\uff75\031\uff75\032\uff75\033\uff93\034\uff75\035\uff75\036" +
    "\uff75\001\002\000\044\010\uff82\011\uff82\012\uff82\013\uff82" +
    "\014\uff82\015\uff82\016\uff82\017\uff82\020\uff82\021\uff82\022" +
    "\uff82\023\uff82\024\uff82\030\uff82\031\uff82\034\uff82\036\uff82" +
    "\001\002\000\010\010\154\011\153\034\162\001\002\000" +
    "\026\007\140\033\130\051\135\062\117\063\104\064\122" +
    "\065\141\066\132\067\137\070\107\001\002\000\032\003" +
    "\133\007\140\011\127\033\130\051\135\062\117\063\104" +
    "\064\122\065\141\066\132\067\137\070\107\001\002\000" +
    "\044\010\uff7d\011\uff7d\012\uff7d\013\uff7d\014\uff7d\015\uff7d" +
    "\016\uff7d\017\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d\024" +
    "\uff7d\030\uff7d\031\uff7d\034\uff7d\036\uff7d\001\002\000\044" +
    "\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016" +
    "\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef" +
    "\030\uffef\031\uffef\034\uffef\036\uffef\001\002\000\036\010" +
    "\uff83\011\uff83\015\uff83\016\uff83\017\uff83\020\uff83\021\uff83" +
    "\022\uff83\023\uff83\024\uff83\030\uff83\031\uff83\034\uff83\036" +
    "\uff83\001\002\000\044\010\uff7f\011\uff7f\012\uff7f\013\uff7f" +
    "\014\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f\021\uff7f\022" +
    "\uff7f\023\uff7f\024\uff7f\030\uff7f\031\uff7f\034\uff7f\036\uff7f" +
    "\001\002\000\012\004\015\005\033\006\017\070\020\001" +
    "\002\000\044\010\uff86\011\uff86\012\145\013\143\014\142" +
    "\015\uff86\016\uff86\017\uff86\020\uff86\021\uff86\022\uff86\023" +
    "\uff86\024\uff86\030\uff86\031\uff86\034\uff86\036\uff86\001\002" +
    "\000\044\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee" +
    "\024\uffee\030\uffee\031\uffee\034\uffee\036\uffee\001\002\000" +
    "\044\010\uff7a\011\uff7a\012\uff7a\013\uff7a\014\uff7a\015\uff7a" +
    "\016\uff7a\017\uff7a\020\uff7a\021\uff7a\022\uff7a\023\uff7a\024" +
    "\uff7a\030\uff7a\031\uff7a\034\uff7a\036\uff7a\001\002\000\044" +
    "\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0" +
    "\030\ufff0\031\ufff0\034\ufff0\036\ufff0\001\002\000\026\007" +
    "\uff69\033\uff69\051\uff69\062\uff69\063\uff69\064\uff69\065\uff69" +
    "\066\uff69\067\uff69\070\uff69\001\002\000\026\007\uff6a\033" +
    "\uff6a\051\uff6a\062\uff6a\063\uff6a\064\uff6a\065\uff6a\066\uff6a" +
    "\067\uff6a\070\uff6a\001\002\000\026\007\140\033\130\051" +
    "\135\062\117\063\104\064\122\065\141\066\132\067\137" +
    "\070\107\001\002\000\026\007\uff6b\033\uff6b\051\uff6b\062" +
    "\uff6b\063\uff6b\064\uff6b\065\uff6b\066\uff6b\067\uff6b\070\uff6b" +
    "\001\002\000\044\010\uff81\011\uff81\012\uff81\013\uff81\014" +
    "\uff81\015\uff81\016\uff81\017\uff81\020\uff81\021\uff81\022\uff81" +
    "\023\uff81\024\uff81\030\uff81\031\uff81\034\uff81\036\uff81\001" +
    "\002\000\046\010\uff7c\011\uff7c\012\uff7c\013\uff7c\014\uff7c" +
    "\015\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c\022\uff7c\023" +
    "\uff7c\024\uff7c\030\uff7c\031\uff7c\034\uff7c\035\150\036\uff7c" +
    "\001\002\000\032\003\133\007\140\011\127\033\130\051" +
    "\135\062\117\063\104\064\122\065\141\066\132\067\137" +
    "\070\107\001\002\000\010\010\154\011\153\036\152\001" +
    "\002\000\044\010\uff7b\011\uff7b\012\uff7b\013\uff7b\014\uff7b" +
    "\015\uff7b\016\uff7b\017\uff7b\020\uff7b\021\uff7b\022\uff7b\023" +
    "\uff7b\024\uff7b\030\uff7b\031\uff7b\034\uff7b\036\uff7b\001\002" +
    "\000\026\007\uff6c\033\uff6c\051\uff6c\062\uff6c\063\uff6c\064" +
    "\uff6c\065\uff6c\066\uff6c\067\uff6c\070\uff6c\001\002\000\026" +
    "\007\uff6d\033\uff6d\051\uff6d\062\uff6d\063\uff6d\064\uff6d\065" +
    "\uff6d\066\uff6d\067\uff6d\070\uff6d\001\002\000\026\007\140" +
    "\033\130\051\135\062\117\063\104\064\122\065\141\066" +
    "\132\067\137\070\107\001\002\000\044\010\uff84\011\uff84" +
    "\012\145\013\143\014\142\015\uff84\016\uff84\017\uff84\020" +
    "\uff84\021\uff84\022\uff84\023\uff84\024\uff84\030\uff84\031\uff84" +
    "\034\uff84\036\uff84\001\002\000\010\010\154\011\153\034" +
    "\160\001\002\000\044\010\uff79\011\uff79\012\uff79\013\uff79" +
    "\014\uff79\015\uff79\016\uff79\017\uff79\020\uff79\021\uff79\022" +
    "\uff79\023\uff79\024\uff79\030\uff79\031\uff79\034\uff79\036\uff79" +
    "\001\002\000\044\010\uff85\011\uff85\012\145\013\143\014" +
    "\142\015\uff85\016\uff85\017\uff85\020\uff85\021\uff85\022\uff85" +
    "\023\uff85\024\uff85\030\uff85\031\uff85\034\uff85\036\uff85\001" +
    "\002\000\044\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4" +
    "\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023" +
    "\uffb4\024\uffb4\030\uffb4\031\uffb4\034\uffb4\036\uffb4\001\002" +
    "\000\004\033\172\001\002\000\050\010\uff80\011\uff80\012" +
    "\uff80\013\uff80\014\uff80\015\uff80\016\uff80\017\uff80\020\uff80" +
    "\021\uff80\022\uff80\023\uff80\024\uff80\030\uff80\031\uff80\032" +
    "\165\034\uff80\035\166\036\uff80\001\002\000\004\070\171" +
    "\001\002\000\032\003\133\007\140\011\127\033\130\051" +
    "\135\062\117\063\104\064\122\065\141\066\132\067\137" +
    "\070\107\001\002\000\010\010\154\011\153\036\170\001" +
    "\002\000\060\010\uff76\011\uff76\012\uff76\013\uff76\014\uff76" +
    "\015\uff76\016\uff76\017\uff76\020\uff76\021\uff76\022\uff76\023" +
    "\uff76\024\uff76\025\uff76\026\uff76\027\uff76\030\uff76\031\uff76" +
    "\032\uff76\033\uff76\034\uff76\035\uff76\036\uff76\001\002\000" +
    "\060\010\uff77\011\uff77\012\uff77\013\uff77\014\uff77\015\uff77" +
    "\016\uff77\017\uff77\020\uff77\021\uff77\022\uff77\023\uff77\024" +
    "\uff77\025\uff77\026\uff77\027\uff77\030\uff77\031\uff77\032\uff77" +
    "\033\uff77\034\uff77\035\uff77\036\uff77\001\002\000\036\003" +
    "\133\007\140\011\127\031\uff90\033\130\034\uff90\051\135" +
    "\062\117\063\104\064\122\065\141\066\132\067\137\070" +
    "\107\001\002\000\012\010\154\011\153\031\uff92\034\uff92" +
    "\001\002\000\006\031\175\034\176\001\002\000\032\003" +
    "\133\007\140\011\127\033\130\051\135\062\117\063\104" +
    "\064\122\065\141\066\132\067\137\070\107\001\002\000" +
    "\044\010\uff7e\011\uff7e\012\uff7e\013\uff7e\014\uff7e\015\uff7e" +
    "\016\uff7e\017\uff7e\020\uff7e\021\uff7e\022\uff7e\023\uff7e\024" +
    "\uff7e\030\uff7e\031\uff7e\034\uff7e\036\uff7e\001\002\000\012" +
    "\010\154\011\153\031\uff91\034\uff91\001\002\000\032\003" +
    "\133\007\140\011\127\033\130\051\135\062\117\063\104" +
    "\064\122\065\141\066\132\067\137\070\107\001\002\000" +
    "\010\010\154\011\153\034\202\001\002\000\044\010\uffb6" +
    "\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017" +
    "\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\030\uffb6" +
    "\031\uffb6\034\uffb6\036\uffb6\001\002\000\014\030\uffa0\062" +
    "\117\063\104\064\122\070\107\001\002\000\004\030\uffa1" +
    "\001\002\000\004\030\206\001\002\000\034\003\133\007" +
    "\140\011\127\030\uffa2\033\130\051\135\062\117\063\104" +
    "\064\122\065\141\066\132\067\137\070\107\001\002\000" +
    "\012\023\uff89\024\uff89\030\uff89\034\uff89\001\002\000\032" +
    "\010\154\011\153\015\227\016\233\017\226\020\234\021" +
    "\232\022\231\023\uff88\024\uff88\030\uff88\034\uff88\001\002" +
    "\000\004\030\220\001\002\000\004\030\uffa3\001\002\000" +
    "\010\024\uff8d\030\uff8d\034\uff8d\001\002\000\010\024\216" +
    "\030\uff8f\034\uff8f\001\002\000\032\003\133\007\140\011" +
    "\127\033\130\051\135\062\117\063\104\064\122\065\141" +
    "\066\132\067\137\070\107\001\002\000\032\003\uff8c\007" +
    "\uff8c\011\uff8c\033\uff8c\051\uff8c\062\uff8c\063\uff8c\064\uff8c" +
    "\065\uff8c\066\uff8c\067\uff8c\070\uff8c\001\002\000\010\024" +
    "\uff8e\030\uff8e\034\uff8e\001\002\000\014\034\uff9e\062\117" +
    "\063\104\064\122\070\107\001\002\000\004\034\223\001" +
    "\002\000\004\034\uff9f\001\002\000\032\037\102\047\110" +
    "\052\121\053\106\054\112\055\101\056\114\057\100\062" +
    "\117\063\104\064\122\070\107\001\002\000\036\037\uffa5" +
    "\040\uffa5\047\uffa5\050\uffa5\052\uffa5\053\uffa5\054\uffa5\055" +
    "\uffa5\056\uffa5\057\uffa5\062\uffa5\063\uffa5\064\uffa5\070\uffa5" +
    "\001\002\000\036\037\uff9d\040\uff9d\047\uff9d\050\uff9d\052" +
    "\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\062\uff9d" +
    "\063\uff9d\064\uff9d\070\uff9d\001\002\000\032\003\uff71\007" +
    "\uff71\011\uff71\033\uff71\051\uff71\062\uff71\063\uff71\064\uff71" +
    "\065\uff71\066\uff71\067\uff71\070\uff71\001\002\000\032\003" +
    "\uff73\007\uff73\011\uff73\033\uff73\051\uff73\062\uff73\063\uff73" +
    "\064\uff73\065\uff73\066\uff73\067\uff73\070\uff73\001\002\000" +
    "\032\003\133\007\140\011\127\033\130\051\135\062\117" +
    "\063\104\064\122\065\141\066\132\067\137\070\107\001" +
    "\002\000\032\003\uff6e\007\uff6e\011\uff6e\033\uff6e\051\uff6e" +
    "\062\uff6e\063\uff6e\064\uff6e\065\uff6e\066\uff6e\067\uff6e\070" +
    "\uff6e\001\002\000\032\003\uff6f\007\uff6f\011\uff6f\033\uff6f" +
    "\051\uff6f\062\uff6f\063\uff6f\064\uff6f\065\uff6f\066\uff6f\067" +
    "\uff6f\070\uff6f\001\002\000\032\003\uff72\007\uff72\011\uff72" +
    "\033\uff72\051\uff72\062\uff72\063\uff72\064\uff72\065\uff72\066" +
    "\uff72\067\uff72\070\uff72\001\002\000\032\003\uff70\007\uff70" +
    "\011\uff70\033\uff70\051\uff70\062\uff70\063\uff70\064\uff70\065" +
    "\uff70\066\uff70\067\uff70\070\uff70\001\002\000\016\010\154" +
    "\011\153\023\uff87\024\uff87\030\uff87\034\uff87\001\002\000" +
    "\012\023\237\024\uff8b\030\uff8b\034\uff8b\001\002\000\032" +
    "\003\133\007\140\011\127\033\130\051\135\062\117\063" +
    "\104\064\122\065\141\066\132\067\137\070\107\001\002" +
    "\000\012\023\uff8a\024\uff8a\030\uff8a\034\uff8a\001\002\000" +
    "\032\003\133\007\140\011\127\033\130\051\135\062\117" +
    "\063\104\064\122\065\141\066\132\067\137\070\107\001" +
    "\002\000\012\010\154\011\153\031\243\034\uff9b\001\002" +
    "\000\004\065\247\001\002\000\004\034\245\001\002\000" +
    "\004\030\246\001\002\000\036\037\uffaa\040\uffaa\047\uffaa" +
    "\050\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057" +
    "\uffaa\062\uffaa\063\uffaa\064\uffaa\070\uffaa\001\002\000\004" +
    "\034\uff9c\001\002\000\036\037\uffaf\040\uffaf\047\uffaf\050" +
    "\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf" +
    "\062\uffaf\063\uffaf\064\uffaf\070\uffaf\001\002\000\010\010" +
    "\154\011\153\030\253\001\002\000\036\037\uffad\040\uffad" +
    "\047\uffad\050\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056" +
    "\uffad\057\uffad\062\uffad\063\uffad\064\uffad\070\uffad\001\002" +
    "\000\036\037\uffac\040\uffac\047\uffac\050\uffac\052\uffac\053" +
    "\uffac\054\uffac\055\uffac\056\uffac\057\uffac\062\uffac\063\uffac" +
    "\064\uffac\070\uffac\001\002\000\032\003\133\007\140\011" +
    "\127\033\130\051\135\062\117\063\104\064\122\065\141" +
    "\066\132\067\137\070\107\001\002\000\032\037\102\047" +
    "\110\052\121\053\106\054\112\055\101\056\114\057\100" +
    "\062\117\063\104\064\122\070\107\001\002\000\036\037" +
    "\uffb2\040\uffb2\047\uffb2\050\260\052\uffb2\053\uffb2\054\uffb2" +
    "\055\uffb2\056\uffb2\057\uffb2\062\uffb2\063\uffb2\064\uffb2\070" +
    "\uffb2\001\002\000\032\037\102\047\110\052\121\053\106" +
    "\054\112\055\101\056\114\057\100\062\117\063\104\064" +
    "\122\070\107\001\002\000\032\037\uffa6\047\uffa6\052\uffa6" +
    "\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\062\uffa6\063" +
    "\uffa6\064\uffa6\070\uffa6\001\002\000\036\037\uffb1\040\uffb1" +
    "\047\uffb1\050\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056" +
    "\uffb1\057\uffb1\062\uffb1\063\uffb1\064\uffb1\070\uffb1\001\002" +
    "\000\004\034\263\001\002\000\032\037\uffa7\047\uffa7\052" +
    "\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\062\uffa7" +
    "\063\uffa7\064\uffa7\070\uffa7\001\002\000\032\003\133\007" +
    "\140\011\127\033\130\051\135\062\117\063\104\064\122" +
    "\065\141\066\132\067\137\070\107\001\002\000\010\010" +
    "\154\011\153\034\266\001\002\000\044\010\uffb5\011\uffb5" +
    "\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020" +
    "\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\030\uffb5\031\uffb5" +
    "\034\uffb5\036\uffb5\001\002\000\036\037\uffb3\040\uffb3\047" +
    "\uffb3\050\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3" +
    "\057\uffb3\062\uffb3\063\uffb3\064\uffb3\070\uffb3\001\002\000" +
    "\034\037\102\040\271\047\110\052\121\053\106\054\112" +
    "\055\101\056\114\057\100\062\117\063\104\064\122\070" +
    "\107\001\002\000\036\037\uffa9\040\uffa9\047\uffa9\050\uffa9" +
    "\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\062" +
    "\uffa9\063\uffa9\064\uffa9\070\uffa9\001\002\000\036\037\uffae" +
    "\040\uffae\047\uffae\050\uffae\052\uffae\053\uffae\054\uffae\055" +
    "\uffae\056\uffae\057\uffae\062\uffae\063\uffae\064\uffae\070\uffae" +
    "\001\002\000\004\070\107\001\002\000\010\032\uff75\034" +
    "\276\035\uff75\001\002\000\006\032\165\035\166\001\002" +
    "\000\004\030\277\001\002\000\036\037\uffab\040\uffab\047" +
    "\uffab\050\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab" +
    "\057\uffab\062\uffab\063\uffab\064\uffab\070\uffab\001\002\000" +
    "\004\033\306\001\002\000\032\003\133\007\140\011\127" +
    "\033\130\051\135\062\117\063\104\064\122\065\141\066" +
    "\132\067\137\070\107\001\002\000\006\030\uff94\034\uff94" +
    "\001\002\000\006\030\uff95\034\uff95\001\002\000\032\003" +
    "\uff74\007\uff74\011\uff74\033\uff74\051\uff74\062\uff74\063\uff74" +
    "\064\uff74\065\uff74\066\uff74\067\uff74\070\uff74\001\002\000" +
    "\012\010\154\011\153\030\uff98\034\uff98\001\002\000\036" +
    "\003\133\007\140\011\127\031\uff90\033\130\034\uff90\051" +
    "\135\062\117\063\104\064\122\065\141\066\132\067\137" +
    "\070\107\001\002\000\006\031\175\034\310\001\002\000" +
    "\006\030\uff96\034\uff96\001\002\000\006\031\uffc2\034\uffc2" +
    "\001\002\000\010\030\uffe2\031\uffe2\034\uffe2\001\002\000" +
    "\006\031\uffbf\034\uffbf\001\002\000\012\030\uffbb\031\uffbb" +
    "\034\uffbb\035\316\001\002\000\010\030\uffe3\031\uffe3\034" +
    "\uffe3\001\002\000\004\036\317\001\002\000\010\030\uffbc" +
    "\031\uffbc\034\uffbc\001\002\000\004\070\uffc4\001\002\000" +
    "\004\070\uffc3\001\002\000\004\070\323\001\002\000\004" +
    "\033\uffc7\001\002\000\026\003\uffe0\004\uffe0\005\uffe0\006" +
    "\uffe0\037\uffe0\042\uffe0\044\uffe0\046\uffe0\061\uffe0\070\uffe0" +
    "\001\002\000\006\037\uffdc\045\uffdc\001\002\000\004\070" +
    "\330\001\002\000\006\031\uffea\040\uffea\001\002\000\010" +
    "\025\335\031\uffe9\040\uffe9\001\002\000\006\031\332\040" +
    "\333\001\002\000\004\070\330\001\002\000\026\003\uffed" +
    "\004\uffed\005\uffed\006\uffed\037\uffed\042\uffed\044\uffed\046" +
    "\uffed\061\uffed\070\uffed\001\002\000\006\031\uffeb\040\uffeb" +
    "\001\002\000\004\065\336\001\002\000\006\031\uffe8\040" +
    "\uffe8\001\002\000\004\037\uffcf\001\002\000\004\037\uffec" +
    "\001\002\000\006\003\344\070\346\001\002\000\004\030" +
    "\343\001\002\000\026\003\ufff5\004\ufff5\005\ufff5\006\ufff5" +
    "\037\ufff5\042\ufff5\044\ufff5\046\ufff5\061\ufff5\070\ufff5\001" +
    "\002\000\006\030\ufff1\031\ufff1\001\002\000\006\030\ufff3" +
    "\031\ufff3\001\002\000\004\025\353\001\002\000\006\030" +
    "\351\031\350\001\002\000\006\003\344\070\346\001\002" +
    "\000\026\003\ufff6\004\ufff6\005\ufff6\006\ufff6\037\ufff6\042" +
    "\ufff6\044\ufff6\046\ufff6\061\ufff6\070\ufff6\001\002\000\006" +
    "\030\ufff4\031\ufff4\001\002\000\010\065\141\066\132\067" +
    "\137\001\002\000\006\030\ufff2\031\ufff2\001\002\000\030" +
    "\003\uffe6\004\uffe6\005\uffe6\006\uffe6\037\uffe6\040\uffe6\042" +
    "\uffe6\044\uffe6\046\uffe6\061\uffe6\070\uffe6\001\002\000\006" +
    "\030\uffe4\031\uffe4\001\002\000\006\030\361\031\360\001" +
    "\002\000\012\003\312\030\uffe1\031\uffe1\070\314\001\002" +
    "\000\030\003\uffe7\004\uffe7\005\uffe7\006\uffe7\037\uffe7\040" +
    "\uffe7\042\uffe7\044\uffe7\046\uffe7\061\uffe7\070\uffe7\001\002" +
    "\000\006\030\uffe5\031\uffe5\001\002\000\004\070\364\001" +
    "\002\000\012\003\uffde\037\uffde\043\uffde\045\uffde\001\002" +
    "\000\016\004\uffc8\005\uffc8\006\uffc8\040\366\060\uffc8\070" +
    "\uffc8\001\002\000\004\002\001\001\002\000\016\004\uffcd" +
    "\005\uffcd\006\uffcd\040\uffcd\060\uffcd\070\uffcd\001\002\000" +
    "\016\004\015\005\033\006\017\040\372\060\321\070\020" +
    "\001\002\000\004\070\u0101\001\002\000\026\003\uffd0\004" +
    "\uffd0\005\uffd0\006\uffd0\037\uffd0\042\uffd0\044\uffd0\046\uffd0" +
    "\061\uffd0\070\uffd0\001\002\000\016\004\uffce\005\uffce\006" +
    "\uffce\040\uffce\060\uffce\070\uffce\001\002\000\004\033\375" +
    "\001\002\000\016\004\015\005\033\006\017\031\uffc0\034" +
    "\uffc0\070\020\001\002\000\006\031\067\034\377\001\002" +
    "\000\004\030\u0100\001\002\000\016\004\uffcc\005\uffcc\006" +
    "\uffcc\040\uffcc\060\uffcc\070\uffcc\001\002\000\004\033\uffcb" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\010\003\004\064\003\110\005\001\001\000" +
    "\004\004\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\022\006\015\010\033\011\024\013\021\022\025" +
    "\067\034\070\012\072\035\076\023\111\020\001\001\000" +
    "\002\001\001\000\004\021\364\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\356\107\355\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\076\340\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\040\001\001\000\004" +
    "\076\324\001\001\000\002\001\001\000\004\016\041\001" +
    "\001\000\002\001\001\000\006\017\044\076\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\076\046\001" +
    "\001\000\002\001\001\000\006\015\050\027\051\001\001" +
    "\000\004\020\053\001\001\000\006\011\052\076\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\055" +
    "\001\001\000\010\025\061\065\057\113\056\001\001\000" +
    "\006\076\317\077\321\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\030\064\031\065\076" +
    "\063\001\001\000\004\107\312\001\001\000\004\051\067" +
    "\001\001\000\002\001\001\000\006\031\310\076\063\001" +
    "\001\000\002\001\001\000\004\112\071\001\001\000\004" +
    "\027\072\001\001\000\010\011\052\044\073\076\023\001" +
    "\001\000\002\001\001\000\004\040\075\001\001\000\020" +
    "\032\115\035\110\041\102\045\114\061\104\066\076\105" +
    "\112\001\001\000\010\042\274\052\277\053\300\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\267\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\254" +
    "\001\001\000\016\066\123\073\124\074\250\075\135\105" +
    "\133\106\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\066\123\073\124\074\125\075\135\105\133" +
    "\106\130\001\001\000\006\042\163\052\162\001\001\000" +
    "\002\001\001\000\004\055\154\001\001\000\014\066\123" +
    "\073\124\075\160\105\133\106\130\001\001\000\016\066" +
    "\123\073\124\074\156\075\135\105\133\106\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\076\146\001\001\000\004\056\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\066\123" +
    "\073\145\105\133\106\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\066\123\073\124" +
    "\074\150\075\135\105\133\106\130\001\001\000\004\055" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\066\123\073\124\075\155\105\133\106" +
    "\130\001\001\000\004\056\143\001\001\000\004\055\154" +
    "\001\001\000\002\001\001\000\004\056\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\066\123\073\124\074\166\075\135\105" +
    "\133\106\130\001\001\000\004\055\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\043\173\066\123\073" +
    "\124\074\172\075\135\105\133\106\130\001\001\000\004" +
    "\055\154\001\001\000\002\001\001\000\016\066\123\073" +
    "\124\074\176\075\135\105\133\106\130\001\001\000\002" +
    "\001\001\000\004\055\154\001\001\000\016\066\123\073" +
    "\124\074\200\075\135\105\133\106\130\001\001\000\004" +
    "\055\154\001\001\000\002\001\001\000\012\041\203\062" +
    "\204\066\076\105\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\036\210\066\123\073\124\074\207\075" +
    "\135\100\211\102\212\104\206\105\133\106\130\001\001" +
    "\000\004\103\235\001\001\000\006\054\227\055\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\101\213" +
    "\001\001\000\004\057\214\001\001\000\022\066\123\073" +
    "\124\074\207\075\135\102\216\104\206\105\133\106\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\041" +
    "\221\063\220\066\076\105\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\032\224\035\110\041\102\045" +
    "\114\046\223\061\104\066\076\105\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\066\123\073\124\074\234\075\135\105\133" +
    "\106\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\154\001\001" +
    "\000\002\001\001\000\020\066\123\073\124\074\207\075" +
    "\135\104\237\105\133\106\130\001\001\000\002\001\001" +
    "\000\016\066\123\073\124\074\241\075\135\105\133\106" +
    "\130\001\001\000\006\037\243\055\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\055\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\066" +
    "\123\073\124\074\207\075\135\100\261\102\212\104\206" +
    "\105\133\106\130\001\001\000\020\032\255\035\110\041" +
    "\102\045\114\061\104\066\076\105\112\001\001\000\004" +
    "\060\256\001\001\000\020\032\260\035\110\041\102\045" +
    "\114\061\104\066\076\105\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\066\123\073\124\074\264\075\135\105\133\106\130" +
    "\001\001\000\004\055\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\032\115\035\110\041\102\045\114" +
    "\061\104\066\076\105\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\066\273\001\001\000\004\042\274" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\066\123\073\124\074\304" +
    "\075\135\105\133\106\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\154\001\001" +
    "\000\020\043\306\066\123\073\124\074\172\075\135\105" +
    "\133\106\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\314\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\047\330\050\326\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\333" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\346\033\344\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\351\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\106\353\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\107\361\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\025\061\065\057\113\056\001\001\000\002\001\001" +
    "\000\004\023\367\001\001\000\012\024\372\071\373\076" +
    "\317\077\370\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\375\031" +
    "\065\076\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }



	boolean errorDetected = false;
	
    int line = -1;
    String type = "";

	Logger log = Logger.getLogger(getClass());   

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
        done_parsing();
        report_error(message, info);
    }      
  	public void syntax_error(Symbol cur_token) {
        line = cur_token.left;
        report_error("Sintaksna greska: ", cur_token);
    }	
	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje ne moze da se nastavi: ", cur_token);
    }      
    public void report_error(String message, Object info) {
		errorDetected = true;
    	StringBuilder msg = new StringBuilder("[GRESKA! ");
        msg.append(message);
        if (info instanceof Symbol)
            msg.append("'").append(((Symbol)info).value).append("' na liniji ").append(((Symbol)info).left);
        else if(info == null) {
            msg.append(" " + type + " ");
            msg.append("na liniji " + line);
        }
        msg.append("]");
        log.error(msg.toString());
    }  
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
        	msg.append("'").append(((Symbol)info).value).append("' na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Mulop ::= MODULO 
            {
              Mulop RESULT = null;
		 RESULT=new Modulo(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Mulop ::= DIVIDE 
            {
              Mulop RESULT = null;
		 RESULT=new Divide(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Mulop ::= MULTIPLY 
            {
              Mulop RESULT = null;
		 RESULT=new Multiplie(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Addop ::= SUBTRACT 
            {
              Addop RESULT = null;
		 RESULT=new Subtract(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Addop ::= ADD 
            {
              Addop RESULT = null;
		 RESULT=new Add(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Relop ::= LESS_EQUAL 
            {
              Relop RESULT = null;
		 RESULT=new LessEqual(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Relop ::= LESS 
            {
              Relop RESULT = null;
		 RESULT=new Less(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Relop ::= GREATER_EQUAL 
            {
              Relop RESULT = null;
		 RESULT=new GreaterEqual(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Relop ::= GREATER 
            {
              Relop RESULT = null;
		 RESULT=new Greater(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Relop ::= NOT_EQUAL 
            {
              Relop RESULT = null;
		 RESULT=new NotEqual(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Relop ::= EQUAL 
            {
              Relop RESULT = null;
		 RESULT=new Equal(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Assignop ::= ASSIGN 
            {
              Assignop RESULT = null;
		 RESULT=new Assignop(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*Assignop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // DesignatorEnd ::= 
            {
              DesignatorEnd RESULT = null;
		 RESULT=new DesignatorEnd(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*DesignatorEnd*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Designator ::= Designator DesignatorEnd LEFT_BRACKET Expr RIGHT_BRACKET 
            {
              Designator RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		DesignatorEnd D2 = (DesignatorEnd)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int E3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E3 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorArrayAccess(D1, D2, E3); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(52/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Designator ::= Designator DesignatorEnd POINT IDENTIFIER 
            {
              Designator RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		DesignatorEnd D2 = (DesignatorEnd)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorPointAccess(D1, D2, name); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(52/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Designator ::= IDENTIFIER 
            {
              Designator RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorName(name); RESULT.setLine(nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(52/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Factor ::= LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS 
            {
              Factor RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactorExpression(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(57/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Factor ::= NULL 
            {
              Factor RESULT = null;
		 RESULT=new FactorNull(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(57/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Factor ::= NEW Type LEFT_BRACKET Expr RIGHT_BRACKET 
            {
              Factor RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactorNewArray(T1, E2); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(57/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Factor ::= NEW Type 
            {
              Factor RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorNewObj(T1); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(57/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Factor ::= ConstValue 
            {
              Factor RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstValue C1 = (ConstValue)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorConst(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(57/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Factor ::= Designator CallStart LEFT_PARENTHESIS ActPars RIGHT_PARENTHESIS 
            {
              Factor RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		CallStart C2 = (CallStart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int A3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActPars A3 = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactorFunctionCall(D1, C2, A3); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(57/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Factor ::= StandardFunction 
            {
              Factor RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		StandardFunction S1 = (StandardFunction)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorStandardFunction(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(57/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Factor ::= Designator DesignatorEnd 
            {
              Factor RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorEnd D2 = (DesignatorEnd)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorDesignator(D1, D2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(57/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Term ::= Term Mulop Factor 
            {
              Term RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Term T1 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Mulop M2 = (Mulop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int F3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor F3 = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TermMulop(T1, M2, F3); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(59/*Term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Term ::= Factor 
            {
              Term RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor F1 = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TermFactor(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(59/*Term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Expr ::= error 
            {
              Expr RESULT = null;
		 parser.type=""; parser.report_error("OPORAVAK Sintaksna greska EXPR ", null);  RESULT=new ExprERR(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Expr ::= Expr Addop Term 
            {
              Expr RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Addop A2 = (Addop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int T3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term T3 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExprAddop(E1, A2, T3); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Expr ::= SUBTRACT Term 
            {
              Expr RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term T1 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExprNegativeTerm(T1); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Expr ::= Term 
            {
              Expr RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term T1 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExprTerm(T1); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CondFact ::= Expr Relop Expr 
            {
              CondFact RESULT = null;
		int leftExprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftExprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr leftExpr = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Relop R1 = (Relop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rightExprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int rightExprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr rightExpr = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondFactCompare(leftExpr, R1, rightExpr); RESULT.setLine(leftExprleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(66/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CondFact ::= Expr 
            {
              CondFact RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondFactExpr(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(66/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CondFactList ::= 
            {
              CondFactList RESULT = null;
		 RESULT=new ConditionFactListNO(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(65/*CondFactList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CondFactList ::= CondFactList AND CondFact 
            {
              CondFactList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		CondFactList C1 = (CondFactList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact C2 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConditionFactList(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(65/*CondFactList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CondTerm ::= CondFact CondFactList 
            {
              CondTerm RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		CondFact C1 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFactList C2 = (CondFactList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondTerm(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(64/*CondTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OrStart ::= OR 
            {
              OrStart RESULT = null;
		 RESULT=new OrStart(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*OrStart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CondTermList ::= 
            {
              CondTermList RESULT = null;
		 RESULT=new ConditionTermListNO(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(63/*CondTermList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CondTermList ::= CondTermList OrStart CondTerm 
            {
              CondTermList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		CondTermList C1 = (CondTermList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int O2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int O2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		OrStart O2 = (OrStart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTerm C3 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConditionTermList(C1, O2, C3); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(63/*CondTermList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Condition ::= CondTerm CondTermList 
            {
              Condition RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		CondTerm C1 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTermList C2 = (CondTermList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Condition(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(62/*Condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ActPars ::= 
            {
              ActPars RESULT = null;
		 RESULT=new ActParametersNO(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*ActPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ActPars ::= ActPars COMMA Expr 
            {
              ActPars RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ActPars A1 = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActParameters(A1, E2); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*ActPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ActPars ::= Expr 
            {
              ActPars RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActParameter(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*ActPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CallStart ::= 
            {
              CallStart RESULT = null;
		 RESULT=new CallStart(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*CallStart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DesignatorStatement ::= Designator DECREMENT 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorDecrement(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DesignatorStatement ::= Designator INCREMENT 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorIncrement(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DesignatorStatement ::= Designator CallStart LEFT_PARENTHESIS ActPars RIGHT_PARENTHESIS 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		CallStart C2 = (CallStart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int A3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActPars A3 = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorFunctionCall(D1, C2, A3); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DesignatorStatement ::= StandardFunction 
            {
              DesignatorStatement RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		StandardFunction S1 = (StandardFunction)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorStandardFunction(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DesignatorStatement ::= Designator Assignop Expr 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Assignop A2 = (Assignop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int E3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E3 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorAssign(D1, A2, E3); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // StatementList ::= 
            {
              StatementList RESULT = null;
		 RESULT=new StatementsNO(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // StatementList ::= StatementList Statement 
            {
              StatementList RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S1 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Statements(S1, S2); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PrintParam ::= 
            {
              PrintParam RESULT = null;
		 RESULT=new PrintParameterNO(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*PrintParam*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PrintParam ::= COMMA INT_VALUE 
            {
              PrintParam RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new PrintParameter(value); RESULT.setLine(valueleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*PrintParam*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ForBody ::= Statement 
            {
              ForBody RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S1 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ForBody(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*ForBody*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ForUpdateStmnt ::= 
            {
              ForUpdateStmnt RESULT = null;
		 RESULT=new ForUpdateStatementNO(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*ForUpdateStmnt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ForUpdateStmnt ::= DesignatorStatement 
            {
              ForUpdateStmnt RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorStatement D1 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ForUpdateStatement(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*ForUpdateStmnt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ForInitStmnt ::= 
            {
              ForInitStmnt RESULT = null;
		 RESULT=new ForInitStatementNO(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*ForInitStmnt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ForInitStmnt ::= DesignatorStatement 
            {
              ForInitStmnt RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorStatement D1 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ForInitStatement(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*ForInitStmnt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ForCond ::= 
            {
              ForCond RESULT = null;
		 RESULT=new ForConditionNO(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*ForCond*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ForCond ::= Condition 
            {
              ForCond RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ForCondition(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*ForCond*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ForStart ::= FOR 
            {
              ForStart RESULT = null;
		 RESULT=new ForStart(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*ForStart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ForStatement ::= ForStart LEFT_PARENTHESIS ForInitStmnt SEPARATOR ForCond SEPARATOR ForUpdateStmnt RIGHT_PARENTHESIS ForBody 
            {
              ForStatement RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		ForStart F1 = (ForStart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		ForInitStmnt F2 = (ForInitStmnt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int F3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int F3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ForCond F3 = (ForCond)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int F4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int F4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ForUpdateStmnt F4 = (ForUpdateStmnt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int F5left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F5right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ForBody F5 = (ForBody)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ForStatement(F1, F2, F3, F4, F5); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*ForStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ElseStart ::= ELSE 
            {
              ElseStart RESULT = null;
		 RESULT=new ElseStart(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*ElseStart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IfCond ::= LEFT_PARENTHESIS Condition RIGHT_PARENTHESIS 
            {
              IfCond RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new IfCondition(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*IfCond*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // IfStart ::= IF 
            {
              IfStart RESULT = null;
		 RESULT=new IfStart(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*IfStart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Statement ::= LEFT_BRACE StatementList RIGHT_BRACE 
            {
              Statement RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S1 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new StatementBlock(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Statement ::= PRINT LEFT_PARENTHESIS Expr PrintParam RIGHT_PARENTHESIS SEPARATOR 
            {
              Statement RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int P2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int P2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		PrintParam P2 = (PrintParam)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new StatementPrint(E1, P2); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Statement ::= READ LEFT_PARENTHESIS Designator RIGHT_PARENTHESIS SEPARATOR 
            {
              Statement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new StatementRead(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Statement ::= RETURN Expr SEPARATOR 
            {
              Statement RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new StatementReturnExpr(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Statement ::= RETURN SEPARATOR 
            {
              Statement RESULT = null;
		 RESULT=new StatementReturn(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Statement ::= CONTINUE SEPARATOR 
            {
              Statement RESULT = null;
		 RESULT=new StatementContinue(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Statement ::= BREAK SEPARATOR 
            {
              Statement RESULT = null;
		 RESULT=new StatementBreak(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Statement ::= ForStatement 
            {
              Statement RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ForStatement F1 = (ForStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementFor(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Statement ::= IfStart IfCond Statement ElseStart Statement 
            {
              Statement RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		IfStart I1 = (IfStart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int I2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int I2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		IfCond I2 = (IfCond)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int S3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int S3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Statement S3 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int E4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ElseStart E4 = (ElseStart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S5left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S5right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S5 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementIfElse(I1, I2, S3, E4, S5); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Statement ::= IfStart IfCond Statement 
            {
              Statement RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		IfStart I1 = (IfStart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int I2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int I2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		IfCond I2 = (IfCond)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S3 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementIf(I1, I2, S3); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Statement ::= DesignatorStatement SEPARATOR 
            {
              Statement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DesignatorStatement D1 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new StatementDesignator(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // StandardFunction ::= LEN LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS 
            {
              StandardFunction RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new StandardFunctionLen(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*StandardFunction*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // StandardFunction ::= ORD LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS 
            {
              StandardFunction RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new StandardFunctionOrd(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*StandardFunction*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // StandardFunction ::= CHR LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS 
            {
              StandardFunction RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new StandardFunctionChr(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*StandardFunction*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Type ::= IDENTIFIER 
            {
              Type RESULT = null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TypeCustom(typeName); RESULT.setLine(typeNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*Type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Type ::= CHAR 
            {
              Type RESULT = null;
		 RESULT=new TypeChar(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*Type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Type ::= BOOL 
            {
              Type RESULT = null;
		 RESULT=new TypeBool(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*Type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Type ::= INT 
            {
              Type RESULT = null;
		 RESULT=new TypeInt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*Type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OptionalBrackets ::= 
            {
              OptionalBrackets RESULT = null;
		 RESULT=new BracketsNO(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*OptionalBrackets*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OptionalBrackets ::= LEFT_BRACKET RIGHT_BRACKET 
            {
              OptionalBrackets RESULT = null;
		 RESULT=new Brackets(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*OptionalBrackets*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VarDeclList ::= 
            {
              VarDeclList RESULT = null;
		 RESULT=new VariableDeclListNO(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VarDeclList ::= VarDeclList VarDecl 
            {
              VarDeclList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarDeclList V1 = (VarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl V2 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VariableDeclList(V1, V2); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FormPar ::= Type VarName 
            {
              FormPar RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarName V2 = (VarName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormPar(T1, V2); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*FormPar*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FormPars ::= 
            {
              FormPars RESULT = null;
		 RESULT=new FormalParametersNO(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*FormPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FormPars ::= FormPar 
            {
              FormPars RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormPar F1 = (FormPar)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormalParameter(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*FormPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FormPars ::= FormPars COMMA FormPar 
            {
              FormPars RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		FormPars F1 = (FormPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormPar F2 = (FormPar)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormalParameters(F1, F2); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*FormPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ReturnType ::= VOID 
            {
              ReturnType RESULT = null;
		 RESULT=new ReturnVoid(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(61/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ReturnType ::= Type 
            {
              ReturnType RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ReturnT(T1); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(61/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MethodVarsEnd ::= 
            {
              MethodVarsEnd RESULT = null;
		 RESULT=new MethodVarsEnd(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*MethodVarsEnd*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MethodFormParsEnd ::= 
            {
              MethodFormParsEnd RESULT = null;
		 RESULT=new MethodFormParsEnd(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*MethodFormParsEnd*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MethodStart ::= NT$3 ReturnType IDENTIFIER 
            {
              MethodStart RESULT = null;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value != null )
                RESULT = (MethodStart) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ReturnType R1 = (ReturnType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodStart(R1, methodName); RESULT.setLine(R1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(51/*MethodStart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$3 ::= 
            {
              Object RESULT = null;
 parser.type = "formalnog parametra"; 
              CUP$MJParser$result = new java_cup.runtime.Symbol(73/*NT$3*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MethodDecl ::= MethodStart LEFT_PARENTHESIS FormPars MethodFormParsEnd RIGHT_PARENTHESIS NT$2 VarDeclList MethodVarsEnd LEFT_BRACE StatementList RIGHT_BRACE 
            {
              MethodDecl RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value != null )
                RESULT = (MethodDecl) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		MethodStart M1 = (MethodStart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		FormPars F2 = (FormPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		int M3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int M3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		MethodFormParsEnd M3 = (MethodFormParsEnd)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int V4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int V4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		VarDeclList V4 = (VarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int M5left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int M5right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		MethodVarsEnd M5 = (MethodVarsEnd)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int S6left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S6right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S6 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MethodDecl(M1, F2, M3, V4, M5, S6); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$2 ::= 
            {
              Object RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		MethodStart M1 = (MethodStart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		FormPars F2 = (FormPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int M3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodFormParsEnd M3 = (MethodFormParsEnd)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
 parser.type = "lokalne promenljive"; 
              CUP$MJParser$result = new java_cup.runtime.Symbol(72/*NT$2*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // InterfaceMethodStart ::= ReturnType IDENTIFIER 
            {
              InterfaceMethodStart RESULT = null;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ReturnType R1 = (ReturnType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new InterfaceMethodStart(R1, methodName); RESULT.setLine(R1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(55/*InterfaceMethodStart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // InterfaceMethodDecl ::= InterfaceMethodStart LEFT_PARENTHESIS FormPars RIGHT_PARENTHESIS SEPARATOR 
            {
              InterfaceMethodDecl RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		InterfaceMethodStart I1 = (InterfaceMethodStart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		FormPars F2 = (FormPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new InterfaceMethodDecl(I1, F2); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*InterfaceMethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // InterfaceMethodDeclList ::= 
            {
              InterfaceMethodDeclList RESULT = null;
		 RESULT=new InterfaceMethodListNO(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*InterfaceMethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // InterfaceMethodDeclList ::= InterfaceMethodDeclList InterfaceMethodDecl 
            {
              InterfaceMethodDeclList RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		InterfaceMethodDeclList I1 = (InterfaceMethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int I2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int I2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		InterfaceMethodDecl I2 = (InterfaceMethodDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new InterfaceMethodList(I1, I2); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*InterfaceMethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // InterfaceStart ::= INTERFACE IDENTIFIER 
            {
              InterfaceStart RESULT = null;
		int interfaceNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int interfaceNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String interfaceName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new InterfaceStart(interfaceName); RESULT.setLine(interfaceNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(54/*InterfaceStart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // InterfaceDecl ::= InterfaceStart LEFT_BRACE InterfaceMethodDeclList RIGHT_BRACE 
            {
              InterfaceDecl RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		InterfaceStart I1 = (InterfaceStart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int I2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int I2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		InterfaceMethodDeclList I2 = (InterfaceMethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new InterfaceDecl(I1, I2); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*InterfaceDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MethodDeclList ::= 
            {
              MethodDeclList RESULT = null;
		 RESULT=new MethodDeclarationsNO(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              MethodDeclList RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclList M1 = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MethodDecl M2 = (MethodDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ClassMethodDeclList ::= 
            {
              ClassMethodDeclList RESULT = null;
		 RESULT=new MethodDeclarationListNO(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*ClassMethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ClassMethodDeclList ::= LEFT_BRACE MethodDeclList RIGHT_BRACE 
            {
              ClassMethodDeclList RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclList M1 = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MethodDeclarationList(M1); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*ClassMethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // InterfaceList ::= 
            {
              InterfaceList RESULT = null;
		 RESULT=new InterfacesNO(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*InterfaceList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // InterfaceList ::= Type 
            {
              InterfaceList RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Interface(T1); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*InterfaceList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // InterfaceList ::= InterfaceList COMMA Type 
            {
              InterfaceList RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		InterfaceList I1 = (InterfaceList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int T2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type T2 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Interfaces(I1, T2); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*InterfaceList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Implements ::= 
            {
              Implements RESULT = null;
		 RESULT=new ImplementsListNO(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*Implements*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Implements ::= IMPLEMENTS InterfaceList 
            {
              Implements RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		InterfaceList I1 = (InterfaceList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ImplementsList(I1); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*Implements*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Extends ::= 
            {
              Extends RESULT = null;
		 RESULT=new ExtendsTypeNO(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*Extends*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Extends ::= error 
            {
              Extends RESULT = null;
		 parser.report_error("OPORAVAK Greska kod prosirivanja klase", new Object());  RESULT=new ExtendsERR(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*Extends*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Extends ::= EXTENDS Type 
            {
              Extends RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExtendsType(T1); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*Extends*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClassVarDeclList ::= VarDeclList 
            {
              ClassVarDeclList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDeclList V1 = (VarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ClassVarDeclList(V1); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*ClassVarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassStart ::= NT$1 CLASS IDENTIFIER 
            {
              ClassStart RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value != null )
                RESULT = (ClassStart) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ClassStart(className); RESULT.setLine(classNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(56/*ClassStart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$1 ::= 
            {
              Object RESULT = null;
 parser.type = "polja klase"; 
              CUP$MJParser$result = new java_cup.runtime.Symbol(71/*NT$1*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassDecl ::= ClassStart Extends Implements LEFT_BRACE ClassVarDeclList ClassMethodDeclList RIGHT_BRACE 
            {
              ClassDecl RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		ClassStart C1 = (ClassStart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Extends E2 = (Extends)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int I3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int I3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Implements I3 = (Implements)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int C4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ClassVarDeclList C4 = (ClassVarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C5left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C5right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ClassMethodDeclList C5 = (ClassMethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ClassDecl(C1, E2, I3, C4, C5); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*ClassDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VarName ::= 
            {
              VarName RESULT = null;
		 parser.report_error("OPORAVAK Sintasna greska prilikom deklarisanja", null);  RESULT=new VariableNameEmptyERR(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(69/*VarName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VarName ::= error 
            {
              VarName RESULT = null;
		 parser.report_error("OPORAVAK Sintasna greska prilikom deklarisanja", null);  RESULT=new VariableNameERR(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(69/*VarName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VarName ::= IDENTIFIER OptionalBrackets 
            {
              VarName RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int bracketsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int bracketsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		OptionalBrackets brackets = (OptionalBrackets)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VariableName(varName, brackets); RESULT.setLine(varNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(69/*VarName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VarList ::= VarName 
            {
              VarList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarName V1 = (VarName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VariableListEnd(V1); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*VarList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VarList ::= VarList COMMA VarName 
            {
              VarList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		VarList V1 = (VarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarName V2 = (VarName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VariableList(V1, V2); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*VarList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VarDecl ::= error SEPARATOR 
            {
              VarDecl RESULT = null;
		 parser.report_error("OPORAVAK Sintasna greska prilikom deklarisanja", null);  RESULT=new VariableDeclERR(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VarDecl ::= Type VarList SEPARATOR 
            {
              VarDecl RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarList V2 = (VarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new VariableDecl(T1, V2); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EnumAssign ::= IDENTIFIER ASSIGN INT_VALUE 
            {
              EnumAssign RESULT = null;
		int enumNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int enumNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String enumName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new EnumNameAssign(enumName, value); RESULT.setLine(enumNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*EnumAssign*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EnumAssign ::= IDENTIFIER 
            {
              EnumAssign RESULT = null;
		int enumNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int enumNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String enumName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new EnumName(enumName); RESULT.setLine(enumNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*EnumAssign*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EnumAssignList ::= EnumAssign 
            {
              EnumAssignList RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		EnumAssign E1 = (EnumAssign)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new EnumerationAssignEnd(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*EnumAssignList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EnumAssignList ::= EnumAssignList COMMA EnumAssign 
            {
              EnumAssignList RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		EnumAssignList E1 = (EnumAssignList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		EnumAssign E2 = (EnumAssign)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new EnumerationAssign(E1, E2); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*EnumAssignList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EnumStart ::= ENUM IDENTIFIER 
            {
              EnumStart RESULT = null;
		int enumNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int enumNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String enumName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new EnumStart(enumName); RESULT.setLine(enumNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(53/*EnumStart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EnumDecl ::= EnumStart LEFT_BRACE EnumAssignList RIGHT_BRACE 
            {
              EnumDecl RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		EnumStart E1 = (EnumStart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		EnumAssignList E2 = (EnumAssignList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new EnumDecl(E1, E2); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*EnumDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ConstValue ::= BOOL_VALUE 
            {
              ConstValue RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstValueBool(value); RESULT.setLine(valueleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(68/*ConstValue*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ConstValue ::= CHAR_VALUE 
            {
              ConstValue RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstValueChar(value); RESULT.setLine(valueleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(68/*ConstValue*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ConstValue ::= INT_VALUE 
            {
              ConstValue RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstValueInt(value); RESULT.setLine(valueleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(68/*ConstValue*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstAssign ::= error 
            {
              ConstAssign RESULT = null;
		 parser.report_error("OPORAVAK Sintasna greska prilikom definisanja konstante", null);  RESULT=new ConstantAssignERR(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*ConstAssign*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstAssign ::= IDENTIFIER ASSIGN ConstValue 
            {
              ConstAssign RESULT = null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int constValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int constValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstValue constValue = (ConstValue)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstantAssign(constName, constValue); RESULT.setLine(constNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*ConstAssign*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstAssignList ::= ConstAssign 
            {
              ConstAssignList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstAssign C1 = (ConstAssign)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstantAssignListEnd(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*ConstAssignList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstAssignList ::= ConstAssignList COMMA ConstAssign 
            {
              ConstAssignList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ConstAssignList C1 = (ConstAssignList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstAssign C2 = (ConstAssign)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstantAssignList(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*ConstAssignList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstDecl ::= CONST error SEPARATOR 
            {
              ConstDecl RESULT = null;
		 parser.report_error("OPORAVAK Sintasna greska prilikom definisanja konstante", null);  RESULT=new ConstantDeclERR(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDecl ::= CONST Type ConstAssignList SEPARATOR 
            {
              ConstDecl RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ConstAssignList C2 = (ConstAssignList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ConstantDecl(T1, C2); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decl ::= InterfaceDecl 
            {
              Decl RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		InterfaceDecl I1 = (InterfaceDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DeclarationInterface(I1); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*Decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl ::= EnumDecl 
            {
              Decl RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		EnumDecl E1 = (EnumDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DeclarationEnum(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*Decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= ClassDecl 
            {
              Decl RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ClassDecl C1 = (ClassDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DeclarationClass(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*Decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= VarDecl 
            {
              Decl RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl V1 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DeclarationVar(V1); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*Decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= ConstDecl 
            {
              Decl RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstDecl C1 = (ConstDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DeclarationConst(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*Decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclList ::= 
            {
              DeclList RESULT = null;
		 RESULT=new DeclarationListNO(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*DeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclList ::= DeclList Decl 
            {
              DeclList RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DeclList D1 = (DeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Decl D2 = (Decl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DeclarationList(D1, D2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*DeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgramStart ::= NT$0 PROGRAM IDENTIFIER 
            {
              ProgramStart RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value != null )
                RESULT = (ProgramStart) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int programNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int programNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String programName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ProgramStart(programName); RESULT.setLine(programNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(50/*ProgramStart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT = null;
 parser.type = "globalne promenljive"; 
              CUP$MJParser$result = new java_cup.runtime.Symbol(70/*NT$0*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              SyntaxNode RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= ProgramStart DeclList LEFT_BRACE MethodDeclList RIGHT_BRACE 
            {
              Program RESULT = null;
		int P1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int P1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ProgramStart P1 = (ProgramStart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		DeclList D2 = (DeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int M3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclList M3 = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Program(P1, D2, M3); RESULT.setLine(P1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

