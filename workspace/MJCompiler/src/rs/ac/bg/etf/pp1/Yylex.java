/* The following code was generated by JFlex 1.4.3 on 14.1.19. 17.22 */

package rs.ac.bg.etf.pp1;

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14.1.19. 17.22 from the specification file
 * <tt>spec/mjlexer.flex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\2\1\1\71\1\0\1\1\1\1\22\0\1\66\1\23\3\65"+
    "\1\21\1\26\1\64\1\33\1\34\1\17\1\15\1\31\1\16\1\32"+
    "\1\20\3\63\1\61\4\63\1\62\1\63\1\65\1\30\1\25\1\22"+
    "\1\24\2\65\4\67\1\60\2\67\1\55\1\56\2\67\1\57\12\67"+
    "\1\54\3\67\1\35\1\65\1\36\1\65\1\70\1\65\1\12\1\5"+
    "\1\10\1\47\1\45\1\50\1\42\1\11\1\2\1\67\1\52\1\7"+
    "\1\43\1\3\1\6\1\41\1\67\1\13\1\44\1\4\1\14\1\53"+
    "\1\51\1\46\2\67\1\37\1\27\1\40\1\65\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\11\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\1\1\12\1\13\2\1\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\4\3"+
    "\1\25\1\1\1\26\1\27\2\3\1\30\13\3\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\10\3"+
    "\1\0\1\41\2\3\1\42\3\3\1\43\1\44\13\3"+
    "\1\45\2\3\1\46\2\3\1\47\1\50\1\51\3\3"+
    "\1\52\1\3\1\53\3\3\1\54\1\55\2\3\1\56"+
    "\2\3\1\57\1\3\1\60\1\3\1\61\3\3\1\62"+
    "\3\3\1\63\6\3\1\64\1\3\1\65\2\3\1\66"+
    "\1\3\1\67\2\3\1\70\20\3\6\0\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\164"+
    "\0\u0366\0\164\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2"+
    "\0\164\0\164\0\164\0\164\0\164\0\164\0\164\0\164"+
    "\0\164\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\164"+
    "\0\164\0\u0658\0\u0692\0\u027e\0\u06cc\0\u0706\0\u0740\0\u077a"+
    "\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910\0\164"+
    "\0\164\0\164\0\164\0\164\0\164\0\164\0\164\0\u094a"+
    "\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a"+
    "\0\u0b54\0\u0b8e\0\u0bc8\0\u027e\0\u0c02\0\u0c3c\0\u0c76\0\u027e"+
    "\0\u027e\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c"+
    "\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u027e\0\u0f2e\0\u0f68\0\164"+
    "\0\u0fa2\0\u0fdc\0\u027e\0\u027e\0\u027e\0\u1016\0\u1050\0\u108a"+
    "\0\u027e\0\u10c4\0\u027e\0\u10fe\0\u1138\0\u1172\0\u027e\0\u027e"+
    "\0\u11ac\0\u11e6\0\u027e\0\u1220\0\u125a\0\u027e\0\u1294\0\u027e"+
    "\0\u12ce\0\u027e\0\u1308\0\u1342\0\u137c\0\u027e\0\u13b6\0\u13f0"+
    "\0\u142a\0\u027e\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586"+
    "\0\u027e\0\u15c0\0\u027e\0\u15fa\0\u1634\0\u027e\0\u166e\0\u027e"+
    "\0\u16a8\0\u16e2\0\u027e\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804"+
    "\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4"+
    "\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4"+
    "\0\u1bde\0\164";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\2\14\1\15\1\14\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\3\14\1\43\2\14\1\44\2\14\1\45\5\14"+
    "\3\46\1\47\1\3\1\4\1\14\1\3\1\4\71\50"+
    "\1\51\73\0\1\4\64\0\1\4\2\0\1\4\2\0"+
    "\1\14\1\52\11\14\24\0\2\14\1\53\4\14\1\54"+
    "\13\14\3\0\2\14\3\0\12\14\1\55\24\0\4\14"+
    "\1\56\16\14\3\0\2\14\3\0\11\14\1\57\1\14"+
    "\24\0\23\14\3\0\2\14\3\0\4\14\1\60\4\14"+
    "\1\61\1\14\24\0\23\14\3\0\2\14\3\0\11\14"+
    "\1\62\1\14\24\0\23\14\3\0\2\14\3\0\13\14"+
    "\24\0\4\14\1\63\16\14\3\0\2\14\3\0\4\14"+
    "\1\64\1\65\1\14\1\66\3\14\24\0\23\14\3\0"+
    "\2\14\3\0\13\14\24\0\23\14\3\0\2\14\3\0"+
    "\13\14\24\0\4\14\1\67\16\14\3\0\2\14\16\0"+
    "\1\70\72\0\1\71\73\0\1\50\73\0\1\72\71\0"+
    "\1\73\71\0\1\74\71\0\1\75\75\0\1\76\72\0"+
    "\1\77\44\0\11\14\1\100\1\101\24\0\23\14\3\0"+
    "\2\14\3\0\1\14\1\102\3\14\1\103\5\14\24\0"+
    "\5\14\1\104\15\14\3\0\2\14\3\0\4\14\1\105"+
    "\3\14\1\106\2\14\24\0\23\14\3\0\2\14\3\0"+
    "\4\14\1\107\6\14\24\0\23\14\3\0\2\14\62\0"+
    "\3\46\10\0\67\110\3\0\2\14\1\111\10\14\24\0"+
    "\23\14\3\0\2\14\3\0\13\14\24\0\1\112\22\14"+
    "\3\0\2\14\3\0\5\14\1\113\5\14\24\0\23\14"+
    "\3\0\2\14\3\0\13\14\24\0\10\14\1\114\12\14"+
    "\3\0\2\14\3\0\12\14\1\115\24\0\23\14\3\0"+
    "\2\14\3\0\4\14\1\116\6\14\24\0\23\14\3\0"+
    "\2\14\3\0\13\14\24\0\4\14\1\117\16\14\3\0"+
    "\2\14\3\0\13\14\24\0\6\14\1\120\14\14\3\0"+
    "\2\14\3\0\1\14\1\121\11\14\24\0\23\14\3\0"+
    "\2\14\3\0\1\14\1\122\11\14\24\0\23\14\3\0"+
    "\2\14\3\0\10\14\1\123\2\14\24\0\23\14\3\0"+
    "\2\14\3\0\10\14\1\124\2\14\24\0\23\14\3\0"+
    "\2\14\3\0\2\14\1\125\5\14\1\126\2\14\24\0"+
    "\23\14\3\0\2\14\3\0\1\127\3\14\1\130\6\14"+
    "\24\0\23\14\3\0\2\14\3\0\3\14\1\131\7\14"+
    "\24\0\23\14\3\0\2\14\3\0\12\14\1\132\24\0"+
    "\23\14\3\0\2\14\3\0\13\14\24\0\3\14\1\133"+
    "\17\14\3\0\2\14\3\0\2\14\1\134\10\14\24\0"+
    "\23\14\3\0\2\14\3\0\11\14\1\135\1\14\24\0"+
    "\23\14\3\0\2\14\3\0\5\14\1\136\5\14\24\0"+
    "\23\14\3\0\2\14\3\0\1\137\12\14\24\0\23\14"+
    "\3\0\2\14\65\0\1\140\7\0\13\14\24\0\4\14"+
    "\1\141\16\14\3\0\2\14\3\0\5\14\1\142\5\14"+
    "\24\0\23\14\3\0\2\14\3\0\5\14\1\143\5\14"+
    "\24\0\23\14\3\0\2\14\3\0\13\14\24\0\4\14"+
    "\1\144\16\14\3\0\2\14\3\0\5\14\1\145\5\14"+
    "\24\0\23\14\3\0\2\14\3\0\10\14\1\146\2\14"+
    "\24\0\23\14\3\0\2\14\3\0\2\14\1\147\10\14"+
    "\24\0\23\14\3\0\2\14\3\0\13\14\24\0\3\14"+
    "\1\150\17\14\3\0\2\14\3\0\11\14\1\151\1\14"+
    "\24\0\23\14\3\0\2\14\3\0\12\14\1\152\24\0"+
    "\23\14\3\0\2\14\3\0\13\14\24\0\6\14\1\153"+
    "\14\14\3\0\2\14\3\0\1\14\1\154\11\14\24\0"+
    "\23\14\3\0\2\14\3\0\13\14\24\0\1\14\1\155"+
    "\21\14\3\0\2\14\3\0\5\14\1\156\5\14\24\0"+
    "\23\14\3\0\2\14\3\0\13\14\24\0\2\14\1\157"+
    "\20\14\3\0\2\14\3\0\13\14\24\0\4\14\1\160"+
    "\16\14\3\0\2\14\3\0\13\14\24\0\4\14\1\161"+
    "\16\14\3\0\2\14\3\0\13\14\24\0\3\14\1\162"+
    "\17\14\3\0\2\14\3\0\13\14\24\0\6\14\1\163"+
    "\14\14\3\0\2\14\3\0\11\14\1\164\1\14\24\0"+
    "\23\14\3\0\2\14\3\0\13\14\24\0\4\14\1\165"+
    "\16\14\3\0\2\14\3\0\13\14\24\0\11\14\1\166"+
    "\11\14\3\0\2\14\3\0\1\167\12\14\24\0\23\14"+
    "\3\0\2\14\3\0\13\14\24\0\3\14\1\170\17\14"+
    "\3\0\2\14\3\0\11\14\1\171\1\14\24\0\23\14"+
    "\3\0\2\14\3\0\2\14\1\172\10\14\24\0\23\14"+
    "\3\0\2\14\3\0\11\14\1\173\1\14\24\0\23\14"+
    "\3\0\2\14\3\0\1\174\12\14\24\0\23\14\3\0"+
    "\2\14\3\0\1\14\1\175\11\14\24\0\23\14\3\0"+
    "\2\14\3\0\13\14\24\0\4\14\1\176\16\14\3\0"+
    "\2\14\3\0\13\14\24\0\7\14\1\177\13\14\3\0"+
    "\2\14\3\0\13\14\24\0\2\14\1\200\20\14\3\0"+
    "\2\14\3\0\1\14\1\201\11\14\24\0\23\14\3\0"+
    "\2\14\3\0\1\14\1\202\11\14\24\0\23\14\3\0"+
    "\2\14\3\0\10\14\1\203\2\14\24\0\23\14\3\0"+
    "\2\14\3\0\6\14\1\204\4\14\24\0\23\14\3\0"+
    "\2\14\3\0\13\14\24\0\6\14\1\205\14\14\3\0"+
    "\2\14\3\0\10\14\1\206\2\14\24\0\23\14\3\0"+
    "\2\14\3\0\13\14\24\0\4\14\1\207\16\14\3\0"+
    "\2\14\3\0\12\14\1\210\24\0\23\14\3\0\2\14"+
    "\3\0\13\14\24\0\2\14\1\211\20\14\3\0\2\14"+
    "\3\0\13\14\24\0\3\14\1\212\17\14\3\0\2\14"+
    "\3\0\13\14\24\0\3\14\1\213\17\14\3\0\2\14"+
    "\3\0\6\14\1\214\4\14\24\0\23\14\3\0\2\14"+
    "\3\0\1\14\1\215\11\14\24\0\23\14\3\0\2\14"+
    "\3\0\13\14\24\0\4\14\1\216\16\14\3\0\2\14"+
    "\3\0\2\14\1\217\10\14\24\0\23\14\3\0\2\14"+
    "\3\0\13\14\24\0\4\14\1\220\16\14\3\0\2\14"+
    "\3\0\2\14\1\221\10\14\24\0\23\14\3\0\2\14"+
    "\3\0\10\14\1\222\2\14\24\0\23\14\3\0\2\14"+
    "\3\0\13\14\24\0\3\14\1\223\17\14\3\0\2\14"+
    "\3\0\2\14\1\224\10\14\24\0\23\14\3\0\2\14"+
    "\3\0\1\225\12\14\24\0\23\14\3\0\2\14\3\0"+
    "\6\14\1\226\4\14\24\0\23\14\3\0\2\14\3\0"+
    "\13\14\24\0\7\14\1\227\13\14\3\0\2\14\3\0"+
    "\1\230\12\14\24\0\23\14\3\0\2\14\3\0\1\14"+
    "\1\231\11\14\24\0\23\14\3\0\2\14\3\0\10\14"+
    "\1\232\2\14\24\0\23\14\3\0\2\14\3\0\5\14"+
    "\1\233\5\14\24\0\23\14\3\0\2\14\3\0\1\234"+
    "\12\14\24\0\23\14\3\0\2\14\3\0\1\14\1\235"+
    "\11\14\24\0\23\14\3\0\2\14\3\0\2\14\1\236"+
    "\10\14\24\0\23\14\3\0\2\14\3\0\13\14\24\0"+
    "\13\14\1\237\7\14\3\0\2\14\3\0\13\14\24\0"+
    "\14\14\1\240\6\14\3\0\2\14\3\0\13\14\24\0"+
    "\15\14\1\241\5\14\3\0\2\14\3\0\13\14\24\0"+
    "\16\14\1\242\4\14\3\0\2\14\3\0\13\14\24\0"+
    "\17\14\1\243\3\14\3\0\2\14\3\0\13\14\5\0"+
    "\1\244\16\0\23\14\3\0\2\14\62\0\1\245\72\0"+
    "\1\246\37\0\1\247\51\0\1\250\72\0\1\251\73\0"+
    "\1\252\56\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7192];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\14\1\1\11\1\1\1\11\6\1\11\11"+
    "\6\1\2\11\16\1\10\11\10\1\1\0\27\1\1\11"+
    "\103\1\6\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private Symbol createSymbol(int type, Object value) {
		return new Symbol(type, yyline+1, yycolumn, value);
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 34: 
          { return createSymbol(sym.NEW, yytext());
          }
        case 58: break;
        case 50: 
          { return createSymbol(sym.BOOL_VALUE, false);
          }
        case 59: break;
        case 4: 
          { return createSymbol(sym.ADD, yytext());
          }
        case 60: break;
        case 19: 
          { return createSymbol(sym.LEFT_BRACE, yytext());
          }
        case 61: break;
        case 21: 
          { return createSymbol(sym.INT_VALUE, new Integer (yytext()));
          }
        case 62: break;
        case 46: 
          { return createSymbol(sym.VOID, yytext());
          }
        case 63: break;
        case 6: 
          { return createSymbol(sym.MULTIPLY, yytext());
          }
        case 64: break;
        case 30: 
          { return createSymbol(sym.LESS_EQUAL, yytext());
          }
        case 65: break;
        case 49: 
          { return createSymbol(sym.PRINT, yytext());
          }
        case 66: break;
        case 48: 
          { return createSymbol(sym.CLASS, yytext());
          }
        case 67: break;
        case 10: 
          { return createSymbol(sym.GREATER, yytext());
          }
        case 68: break;
        case 11: 
          { return createSymbol(sym.LESS, yytext());
          }
        case 69: break;
        case 40: 
          { return createSymbol(sym.BOOL_VALUE, true);
          }
        case 70: break;
        case 26: 
          { return createSymbol(sym.DECREMENT, yytext());
          }
        case 71: break;
        case 29: 
          { return createSymbol(sym.GREATER_EQUAL, yytext());
          }
        case 72: break;
        case 1: 
          { return createSymbol(sym.ERROR, "Line " + (yyline + 1) + ", syntax error: '" + yytext() + "'");
          }
        case 73: break;
        case 44: 
          { return createSymbol(sym.ENUM, yytext());
          }
        case 74: break;
        case 14: 
          { return createSymbol(sym.POINT, yytext());
          }
        case 75: break;
        case 51: 
          { return createSymbol(sym.RETURN, yytext());
          }
        case 76: break;
        case 31: 
          { return createSymbol(sym.AND, yytext());
          }
        case 77: break;
        case 43: 
          { return createSymbol(sym.READ, yytext());
          }
        case 78: break;
        case 23: 
          { yybegin(YYINITIAL);
          }
        case 79: break;
        case 52: 
          { return createSymbol(sym.PROGRAM, yytext());
          }
        case 80: break;
        case 7: 
          { return createSymbol(sym.DIVIDE, yytext());
          }
        case 81: break;
        case 13: 
          { return createSymbol(sym.COMMA, yytext());
          }
        case 82: break;
        case 33: 
          { return createSymbol(sym.INT, yytext());
          }
        case 83: break;
        case 22: 
          { yybegin(COMMENT);
          }
        case 84: break;
        case 17: 
          { return createSymbol(sym.LEFT_BRACKET, yytext());
          }
        case 85: break;
        case 56: 
          { return createSymbol(sym.IMPLEMENTS, yytext());
          }
        case 86: break;
        case 5: 
          { return createSymbol(sym.SUBTRACT, yytext());
          }
        case 87: break;
        case 36: 
          { return createSymbol(sym.LEN, yytext());
          }
        case 88: break;
        case 20: 
          { return createSymbol(sym.RIGHT_BRACE, yytext());
          }
        case 89: break;
        case 15: 
          { return createSymbol(sym.LEFT_PARENTHESIS, yytext());
          }
        case 90: break;
        case 42: 
          { return createSymbol(sym.CHAR, yytext());
          }
        case 91: break;
        case 9: 
          { return createSymbol(sym.ASSIGN, yytext());
          }
        case 92: break;
        case 3: 
          { return createSymbol(sym.IDENTIFIER, yytext());
          }
        case 93: break;
        case 55: 
          { return createSymbol(sym.INTERFACE, yytext());
          }
        case 94: break;
        case 53: 
          { return createSymbol(sym.EXTENDS, yytext());
          }
        case 95: break;
        case 38: 
          { return createSymbol(sym.CHAR_VALUE, yytext().charAt(1));
          }
        case 96: break;
        case 28: 
          { return createSymbol(sym.NOT_EQUAL, yytext());
          }
        case 97: break;
        case 32: 
          { return createSymbol(sym.OR, yytext());
          }
        case 98: break;
        case 18: 
          { return createSymbol(sym.RIGHT_BRACKET, yytext());
          }
        case 99: break;
        case 12: 
          { return createSymbol(sym.SEPARATOR, yytext());
          }
        case 100: break;
        case 27: 
          { return createSymbol(sym.EQUAL, yytext());
          }
        case 101: break;
        case 35: 
          { return createSymbol(sym.ORD, yytext());
          }
        case 102: break;
        case 16: 
          { return createSymbol(sym.RIGHT_PARENTHESIS, yytext());
          }
        case 103: break;
        case 47: 
          { return createSymbol(sym.BREAK, yytext());
          }
        case 104: break;
        case 24: 
          { return createSymbol(sym.IF, yytext());
          }
        case 105: break;
        case 41: 
          { return createSymbol(sym.BOOL, yytext());
          }
        case 106: break;
        case 39: 
          { return createSymbol(sym.NULL, yytext());
          }
        case 107: break;
        case 37: 
          { return createSymbol(sym.FOR, yytext());
          }
        case 108: break;
        case 45: 
          { return createSymbol(sym.ELSE, yytext());
          }
        case 109: break;
        case 8: 
          { return createSymbol(sym.MODULO, yytext());
          }
        case 110: break;
        case 25: 
          { return createSymbol(sym.INCREMENT, yytext());
          }
        case 111: break;
        case 57: 
          { return createSymbol(sym.CHR, yytext());
          }
        case 112: break;
        case 54: 
          { return createSymbol(sym.CONTINUE, yytext());
          }
        case 113: break;
        case 2: 
          { 
          }
        case 114: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	 return createSymbol(sym.EOF, "eof");
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
